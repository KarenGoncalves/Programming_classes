source("render.R")
quarto::quarto_publish_site()
quarto::quarto_publish_site()
quarto::quarto_publish_site(server = "github.io")
bioconductor_pkgs = c("GenomicFeatures", "GenomicAlignments", "biomaRt")
cran_pkgs = "tidyverse"
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = cran_pkgs,
bioconductor_packages = bioconductor_pkgs
)
plot(cars)
biomaRt::getBM()
listMarts()
listMarts(host = "https://protists.ensembl.org")
listMarts(host = "https://protists.ensembl.org")
listMarts(host = "https://plants.ensembl.org")
host = "https://plants.ensembl.org"
listMarts(host = host)
mart = useMart(host = host, biomart = "plants_mart")
mart = useMart(host = host, biomart = "plants_mart")
listDatasets(mart)
mart = useMart(host = host, biomart = "plants_mart")
listDatasets(mart)[5] # this is a table, so we can filter it
mart = useMart(host = host, biomart = "plants_mart")
listDatasets(mart)[5,] # this is a table, so we can filter it
mart = useMart(host = host, biomart = "plants_mart")
listDatasets(mart)[1:5,] # this is a table, so we can filter it
mart = useMart(host = host, biomart = "plants_mart")
listDatasets(mart)[1:5,] # this is a table, so we can filter it
# If I am working with Arabidopsis thaliana, I can search for it with filter
listDatasets(mart) %>%
filter(grepl("Arabidopsis thaliana", description))
TxDb <- makeTxDbFromBiomart(biomart = biomart,
dataset = dataset,
id_prefix = prefix,
host = host)
# Edit the following based on what you need
biomart = "plants_mart"
dataset = "athaliana_eg_gene"
prefix = "ensembl_"
host = "https://plants.ensembl.org"
# The result will be saved as a .RData object, so we do not recalculate this every time.
dir = "./" # current directory
outputPath = paste0(dir, "Arabidopsis_TxDb.RData")
TxDb <- makeTxDbFromBiomart(biomart = biomart,
dataset = dataset,
id_prefix = prefix,
host = host)
# TxDb is a weird type of data, difficult to access, so we get the information on the transcripts with the function transcriptsBy
tx <- transcriptsBy(TxDb,"gene")
# Then we save the two databases into the Rdata object.
save(TxDb, tx, file = outputPath)
bioconductor_pkgs = c("GenomicFeatures", "GenomicAlignments", "biomaRt", "Rsamtools")
cran_pkgs = "tidyverse"
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = cran_pkgs,
bioconductor_packages = bioconductor_pkgs
)
?summarizeOverlaps
list.files(path = "./../../media/")
list.files(path = "./../../media/") %>%
paste0("output_tables/alignments/")
bamFiles <- paste0("/sites/examples_coding_class/",
list.files(path = "/sites/examples_coding_class/",
pattern = ".bam")
)
bamFiles
bamFiles <- paste0("/sites/examples_coding_class/",
list.files(path = "/sites/examples_coding_class/",
pattern = ".bam$")
)
bamFiles
baiFiles <- paste0(bamFiles, ".bai")
baseNames <- gsub("_Aligned.sortedByCoord.out.bam", "",
basename(bamFiles))
TxDbPath <- "./output_tables/Arabidopsis_TxDb.RData"
TxDbPath <- "/sites/examples_coding_class/Arabidopsis_TxDb.RData"
outPutDir <- "/sites/Programming_classes/"
# Now we load the RData
# This line tells R where the alignment files for the sample are and how much of them to read at a time
bfl <- BamFileList(bamFiles,
baiFiles,
yieldSize=200000)
overlaps <- summarizeOverlaps(
features = tx, # genes' coordinates
reads = bfl, # bam and bai files
mode = "Union",
# mode can be also "IntersectStrict" or "IntersectNotEmpty"
singleEnd = F, fragments = T,
ignore.strand = T
)
host = "https://fungi.ensembl.org"
listMarts(host = host)
library(biomaRt)
host = "https://fungi.ensembl.org"
listMarts(host = host)
host = "https://bacteria.ensembl.org"
listMarts(host = host)
bioconductor_pkgs = c("GenomicFeatures", "GenomicAlignments", "biomaRt", "Rsamtools")
cran_pkgs = "tidyverse"
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = cran_pkgs,
bioconductor_packages = bioconductor_pkgs
)
host = "https://fungi.ensembl.org"
listMarts(host = host)
mart = useMart(host = host, biomart = "plants_mart")
inDir = "/sites/Programming_classes/exampleData/"
bamFiles <- paste0(inDir,
list.files(path = inDir,
pattern = ".bam$")
)
baiFiles <- paste0(bamFiles, ".bai")
baseNames <- gsub("_Aligned.sortedByCoord.out.bam", "",
basename(bamFiles))
TxDbPath <- paste0(inDir, "Arabidopsis_TxDb.RData")
outPutDir <- "/sites/Programming_classes/exampleData/"
# Now we load the RData
# This line tells R where the alignment files for the sample are and how much of them to read at a time
bfl <- BamFileList(bamFiles,
baiFiles,
yieldSize=200000)
overlaps <- summarizeOverlaps(
features = tx, # genes' coordinates
reads = bfl, # bam and bai files
mode = "Union",
# mode can be also "IntersectStrict" or "IntersectNotEmpty"
singleEnd = F, fragments = T,
ignore.strand = T
)
load(TxDbPath)
inDir = "/sites/Programming_classes/exampleData/"
bamFiles <- paste0(inDir,
list.files(path = inDir,
pattern = ".bam$")
)
baiFiles <- paste0(bamFiles, ".bai")
baseNames <- gsub("_Aligned.sortedByCoord.out.bam", "",
basename(bamFiles))
TxDbPath <- paste0(inDir, "Arabidopsis_TxDb.RData")
outPutDir <- "/sites/Programming_classes/exampleData/"
load(TxDbPath)
inDir = "/sites/Programming_classes/exampleData/"
bamFiles <- paste0(inDir,
list.files(path = inDir,
pattern = ".bam$")
)
baiFiles <- paste0(bamFiles, ".bai")
baseNames <- gsub("_Aligned.sortedByCoord.out.bam", "",
basename(bamFiles))
TxDbPath <- paste0(inDir, "Arabidopsis_TxDb.RData")
outPutDir <- "/sites/Programming_classes/exampleData/"
load(TxDbPath)
# Now we load the RData
# This line tells R where the alignment files for the sample are and how much of them to read at a time
bfl <- BamFileList(bamFiles,
baiFiles,
yieldSize=200000)
inDir = "/sites/Programming_classes/exampleData/"
bamFiles <- paste0(inDir,
list.files(path = inDir,
pattern = ".bam$")
)
baiFiles <- paste0(bamFiles, ".bai")
baseNames <- gsub("_Aligned.sortedByCoord.out.bam", "",
basename(bamFiles))
TxDbPath <- paste0(inDir, "Arabidopsis_TxDb.RData")
outPutDir <- "/sites/Programming_classes/exampleData/"
load(TxDbPath)
# Now we load the RData
# This line tells R where the alignment files for the sample are and how much of them to read at a time
bfl <- BamFileList(bamFiles,
baiFiles,
yieldSize=200000)
overlaps <- summarizeOverlaps(
features = tx, # genes' coordinates
reads = bfl, # bam and bai files
mode = "Union",
# mode can be also "IntersectStrict" or "IntersectNotEmpty"
singleEnd = F, fragments = T,
ignore.strand = T
)
# We save this result, so if there is an issue with the rest of the code, the heavy part of the program gets saved before R stops
save(overlaps, file = paste0(outPutDir, "overlaps.RData"))
<p style="color: red">**The things shown in this class are for true mappings onto reference genomes.**</p>
CustomSelection::sample_counts
CustomSelection::sample_counts %>% names
names(CustomSelection::sample_counts)
exp(0.5)
2^0.5
CustomSelection::sample_counts
library(tidyverse)
CustomSelection::sample_counts %>% write.csv(file = "exampleData/Arabidopsis_counts.csv", append = F, quote = F,row.names = T, col.names = T)
CustomSelection::sample_counts %>% head()
CustomSelection::sample_counts %>% dim
CustomSelection::sample_counts %>% head
CustomSelection::sample_counts[5,]
genes_not_expressed = which(rowSums(counts) == 0)
counts = CustomSelection::sample_counts
genes_not_expressed = which(rowSums(counts) == 0)
length(genes_not_expressed)
genes_not_expressed = rowSums(counts) == 0
genes_not_expressed %>% which() %>%length()
# We keep only rows that are FALSE in the variable genes_not_expressed
non_zero_counts = counts[!genes_not_expressed,]
myFirstInput = read.delim("https://karengoncalves.github.io/Programming_classes/exampleData/Class1_exampleData.txt", header = T)
View(myFirstInput)
letters
(myLetters = as.factor(letters))
as.numeric(myLetters)
as.numeric(letters)
myPlantGrowth = head(PlantGrowth)
# Use the name of the table, and [], inside put the number of the row followed by ","
myPlantGrowth[1,] # prints the first row
# See and set rownames with the function rownames
rownames(myPlantGrowth)
# Byt surrounding the code below in (), we both assign the values to the variable AND see the result
(rownames(myPlantGrowth) = 6:1) # creates a sequence starting from 30 and ending in 1
myPlantGrowth = head(PlantGrowth)
# Use the name of the table, and [], inside put the number of the row followed by ","
myPlantGrowth[1,] # prints the first row
# See and set rownames with the function rownames
rownames(myPlantGrowth)
rownames(myPlantGrowth) = 6:1 # creates a sequence starting from 30 and ending in 1
rownames(myPlantGrowth)
library(ggmsa)
?ggmsa
fasta <- system.file("extdata", "sample.fasta", package = "ggmsa")
ggmsa(fasta, color = "CN6")
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse", "tinytex", "patchwork"),
bioconductor_packages = c("Biostrings", "msa", "treeio", "ggtree", "ape", "seqinr", "phangorn"),
github_packages = "YuLab-SMU/ggmsa"
)
(numeric_vector <- 1:10)
class(numeric_vector)
(character_vector <- as.character(numeric_vector)) # change class
class(character_vector)
# To open a fasta file with multiple sequences, use the function readDNAStringSet() or readAAStringSet()
fasta_input = "../../exampleData/Reductases.fasta" %>%
readAAStringSet(format = "fasta")
head(fasta_input)
# The dataset used as example has 48 sequences, we will subset it for the alignment, selecting only 10
fasta_for_alignment <- fasta_input[1:10]
# use ?msa to know what you need to put in the function and what the default values are
myFirstAlignment <- msa(fasta_for_alignment,
method = "ClustalOmega",
verbose = T
)
myFirstAlignment
# The original result is of class MsaAAMultipleAlignment
myFirstAlignment2 <- myFirstAlignment # keep the original, make a copy to modify it
class(myFirstAlignment2) <-  "AAMultipleAlignment"
# We will plot only a part of the alignment - from the AA 220 to the AA 250 - so it is visible
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T)
# We can see also the consensus highlighted
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, consensus_views = T)
# Remove the # below if you want to save the figure
#ggsave("First_alignment_consensus_220_250.tiff")
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5)
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5) +
geom_seqlogo()
# Note that the gaps are also represented in the seqlogo!
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5) +
geom_seqlogo() +
geom_msaBar()
#You can change it by setting:
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
color = "Clustal") # use the option color
# To see the legend, you only need to ask
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
color = "Chemistry_AA", # use the option color
show.legend = T)
# To see the legend, you only need to ask
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
color = "Chemistry_AA", # use the option color
show.legend = T) +
labs(fill = "", color = "")
install_from_dif_sources(cran_packages =
c("RColorBrewer", "pals"))
install_from_dif_sources(cran_packages =
c("RColorBrewer", "pals"))
my_pal <- colorRampPalette(rev(brewer.pal(n = 9, name = "Reds")))
my_custom <- data.frame(names = c(LETTERS[1:26],"-"),
color = my_pal(27),
stringsAsFactors = FALSE)
head(my_custom)
pals::pal.bands(my_cutstom$color)
install_from_dif_sources(cran_packages =
c("RColorBrewer", "pals"))
my_pal <- colorRampPalette(rev(brewer.pal(n = 9, name = "Reds")))
my_custom <- data.frame(names = c(LETTERS[1:26],"-"),
color = my_pal(27),
stringsAsFactors = FALSE)
head(my_custom)
pals::pal.bands(my_custom$color)
# What are the palettes available?
brewer.pal.info
RColorBrewer::display.brewer.all()
my_pal <- brewer.pal(n = 9, name = "Reds") %>%
rev() %>% colorRampPalette()
my_custom <-
data.frame(names = c(LETTERS[1:26],"-"),
# names have a;; possible letters in the alignment
# including the gaps
color = my_pal(27),
# We take 27 colors from the palette
stringsAsFactors = FALSE)
head(my_custom)
pals::pal.bands(my_custom$color)
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
custom_color = my_custom, # use the option custom_color
show.legend = T) +
labs(fill = "", color = "")
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
font = NULL) +
geom_seqlogo() +
geom_msaBar()
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
font = NULL, show.legend = T) +
geom_seqlogo() +
geom_msaBar()
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
font = NULL, show.legend = T) +
geom_seqlogo()
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
font = NULL, show.legend = T) +
geom_seqlogo() +
labs(fill = "", color = "")
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
font = NULL, show.legend = T,
border = NULL) +
geom_seqlogo() +
labs(fill = "", color = "")
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
font = NULL, show.legend = T,
border = "white") +
geom_seqlogo() +
labs(fill = "", color = "")
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
font = NULL, show.legend = T) +
geom_seqlogo() +
labs(fill = "", color = "")
RColorBrewer::display.brewer.all(colorblindFriendly = T)
a = RColorBrewer::display.brewer.all()
install_from_dif_sources(cran_packages =
c("RColorBrewer", "pals"))
# What are the palettes available?
brewer.pal.info
# you can check the palette visually with
#display.brewer.pal(n, name)
# where n is the number of colors the palette has
# and name is the name of the palette
install_from_dif_sources(cran_packages =
c("RColorBrewer", "pals"))
# What are the palettes available?
brewer.pal.info
# you can check the palette visually with
#display.brewer.pal(n, name)
# where n is the number of colors the palette has
# and name is the name of the palette
display.brewer.pal(11, "BrBG")
quarto::quarto_render()
---
title: "Multiple sequence alignment and phylogenetic trees"
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse", "tinytex", "patchwork"),
bioconductor_packages = c("Biostrings", "msa", "treeio", "ggtree", "ape", "seqinr", "phangorn"),
github_packages = "YuLab-SMU/ggmsa"
)
# To open a fasta file with multiple sequences, use the function readDNAStringSet() or readAAStringSet()
fasta_input = "../../exampleData/Reductases.fasta" %>%
readAAStringSet(format = "fasta")
head(fasta_input)
# The dataset used as example has 48 sequences, we will subset it for the alignment, selecting only 10
fasta_for_alignment <- fasta_input[1:10]
# use ?msa to know what you need to put in the function and what the default values are
myFirstAlignment <- msa(fasta_for_alignment,
method = "ClustalOmega",
verbose = T
)
myFirstAlignment
# The original result is of class MsaAAMultipleAlignment
myFirstAlignment2 <- myFirstAlignment # keep the original, make a copy to modify it
class(myFirstAlignment2) <-  "AAMultipleAlignment"
# We will plot only a part of the alignment - from the AA 220 to the AA 250 - so it is visible
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T)
# We can see also the consensus highlighted
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, consensus_views = T)
# Remove the # below if you want to save the figure
#ggsave("First_alignment_consensus_220_250.tiff")
---
title: "Multiple sequence alignment and phylogenetic trees"
quarto::quarto_render()
quarto::quarto_preview()
library(quarto)
quarto_inspect()
169+108+605+177+243
169+42+96+277
42+96+79+108
243+79+277+96
quarto::quarto_render()
CustomSelection::sample_counts
#| echo: false
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse"),
bioconductor_packages = c("Biostrings", "DESeq2"),
github_packages = "KarenGoncalves/CustomSelection"
)
library(DESeq2)
#| echo: false
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse"),
bioconductor_packages = c("Biostrings", "DESeq2"),
github_packages = "KarenGoncalves/CustomSelection"
)
counts = CustomSelection::sample_counts
design_matrix = data.frame(Replicates = names(counts))
design_matrix = design_matrix %>%
mutate(Genotype = gsub("_\\d+$", "",
# replace the underscore and digits at the end of the text
# with nothing
Replicates))
head(design_matrix)
counts[5,]
genes_not_expressed = rowSums(counts) == 0
genes_not_expressed %>% which() %>% length()
# We keep only rows that are FALSE in the variable genes_not_expressed
counts_filtered = counts[ !genes_not_expressed, ]
deseq_dataset = DESeqDataSetFromMatrix(
countData = counts_filtered,
colData = design_matrix, # colData means data about the columns of the count matrix
design = ~Genotype # basically: expression in function of the genotype
) %>% DESeq()
#| echo: false
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse"),
bioconductor_packages = c("Biostrings", "DESeq2"),
github_packages = "KarenGoncalves/CustomSelection"
)
#| echo: false
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse"),
bioconductor_packages = c("Biostrings", "DESeq2"),
github_packages = "KarenGoncalves/CustomSelection"
)
#| echo: false
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse"),
bioconductor_packages = c("Biostrings", "DESeq2"),
github_packages = "KarenGoncalves/CustomSelection"
)

labs(fill = "", color = "")
install_from_dif_sources(cran_packages =
c("RColorBrewer", "pals"))
install_from_dif_sources(cran_packages =
c("RColorBrewer", "pals"))
my_pal <- colorRampPalette(rev(brewer.pal(n = 9, name = "Reds")))
my_custom <- data.frame(names = c(LETTERS[1:26],"-"),
color = my_pal(27),
stringsAsFactors = FALSE)
head(my_custom)
pals::pal.bands(my_cutstom$color)
install_from_dif_sources(cran_packages =
c("RColorBrewer", "pals"))
my_pal <- colorRampPalette(rev(brewer.pal(n = 9, name = "Reds")))
my_custom <- data.frame(names = c(LETTERS[1:26],"-"),
color = my_pal(27),
stringsAsFactors = FALSE)
head(my_custom)
pals::pal.bands(my_custom$color)
# What are the palettes available?
brewer.pal.info
RColorBrewer::display.brewer.all()
my_pal <- brewer.pal(n = 9, name = "Reds") %>%
rev() %>% colorRampPalette()
my_custom <-
data.frame(names = c(LETTERS[1:26],"-"),
# names have a;; possible letters in the alignment
# including the gaps
color = my_pal(27),
# We take 27 colors from the palette
stringsAsFactors = FALSE)
head(my_custom)
pals::pal.bands(my_custom$color)
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
custom_color = my_custom, # use the option custom_color
show.legend = T) +
labs(fill = "", color = "")
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
font = NULL) +
geom_seqlogo() +
geom_msaBar()
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
font = NULL, show.legend = T) +
geom_seqlogo() +
geom_msaBar()
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
font = NULL, show.legend = T) +
geom_seqlogo()
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
font = NULL, show.legend = T) +
geom_seqlogo() +
labs(fill = "", color = "")
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
font = NULL, show.legend = T,
border = NULL) +
geom_seqlogo() +
labs(fill = "", color = "")
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
font = NULL, show.legend = T,
border = "white") +
geom_seqlogo() +
labs(fill = "", color = "")
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, char_width = 0.5,
font = NULL, show.legend = T) +
geom_seqlogo() +
labs(fill = "", color = "")
RColorBrewer::display.brewer.all(colorblindFriendly = T)
a = RColorBrewer::display.brewer.all()
install_from_dif_sources(cran_packages =
c("RColorBrewer", "pals"))
# What are the palettes available?
brewer.pal.info
# you can check the palette visually with
#display.brewer.pal(n, name)
# where n is the number of colors the palette has
# and name is the name of the palette
install_from_dif_sources(cran_packages =
c("RColorBrewer", "pals"))
# What are the palettes available?
brewer.pal.info
# you can check the palette visually with
#display.brewer.pal(n, name)
# where n is the number of colors the palette has
# and name is the name of the palette
display.brewer.pal(11, "BrBG")
quarto::quarto_render()
---
title: "Multiple sequence alignment and phylogenetic trees"
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse", "tinytex", "patchwork"),
bioconductor_packages = c("Biostrings", "msa", "treeio", "ggtree", "ape", "seqinr", "phangorn"),
github_packages = "YuLab-SMU/ggmsa"
)
# To open a fasta file with multiple sequences, use the function readDNAStringSet() or readAAStringSet()
fasta_input = "../../exampleData/Reductases.fasta" %>%
readAAStringSet(format = "fasta")
head(fasta_input)
# The dataset used as example has 48 sequences, we will subset it for the alignment, selecting only 10
fasta_for_alignment <- fasta_input[1:10]
# use ?msa to know what you need to put in the function and what the default values are
myFirstAlignment <- msa(fasta_for_alignment,
method = "ClustalOmega",
verbose = T
)
myFirstAlignment
# The original result is of class MsaAAMultipleAlignment
myFirstAlignment2 <- myFirstAlignment # keep the original, make a copy to modify it
class(myFirstAlignment2) <-  "AAMultipleAlignment"
# We will plot only a part of the alignment - from the AA 220 to the AA 250 - so it is visible
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T)
# We can see also the consensus highlighted
ggmsa(myFirstAlignment2,
start = 220, end = 250,
seq_name = T, consensus_views = T)
# Remove the # below if you want to save the figure
#ggsave("First_alignment_consensus_220_250.tiff")
---
title: "Multiple sequence alignment and phylogenetic trees"
quarto::quarto_render()
quarto::quarto_preview()
library(quarto)
quarto_inspect()
169+108+605+177+243
169+42+96+277
42+96+79+108
243+79+277+96
quarto::quarto_render()
CustomSelection::sample_counts
#| echo: false
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse"),
bioconductor_packages = c("Biostrings", "DESeq2"),
github_packages = "KarenGoncalves/CustomSelection"
)
library(DESeq2)
#| echo: false
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse"),
bioconductor_packages = c("Biostrings", "DESeq2"),
github_packages = "KarenGoncalves/CustomSelection"
)
counts = CustomSelection::sample_counts
design_matrix = data.frame(Replicates = names(counts))
design_matrix = design_matrix %>%
mutate(Genotype = gsub("_\\d+$", "",
# replace the underscore and digits at the end of the text
# with nothing
Replicates))
head(design_matrix)
counts[5,]
genes_not_expressed = rowSums(counts) == 0
genes_not_expressed %>% which() %>% length()
# We keep only rows that are FALSE in the variable genes_not_expressed
counts_filtered = counts[ !genes_not_expressed, ]
deseq_dataset = DESeqDataSetFromMatrix(
countData = counts_filtered,
colData = design_matrix, # colData means data about the columns of the count matrix
design = ~Genotype # basically: expression in function of the genotype
) %>% DESeq()
#| echo: false
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse"),
bioconductor_packages = c("Biostrings", "DESeq2"),
github_packages = "KarenGoncalves/CustomSelection"
)
#| echo: false
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse"),
bioconductor_packages = c("Biostrings", "DESeq2"),
github_packages = "KarenGoncalves/CustomSelection"
)
#| echo: false
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse"),
bioconductor_packages = c("Biostrings", "DESeq2"),
github_packages = "KarenGoncalves/CustomSelection"
)
counts = read.csv("https://karengoncalves.github.io/Programming_classes/exampleData/Arabidopsis_counts.csv",
header = T, row.names = 1)
head(counts)
# Chunk 1
#| echo: false
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse"),
bioconductor_packages = c("Biostrings", "DESeq2"),
github_packages = "KarenGoncalves/CustomSelection"
)
# Chunk 2
counts = CustomSelection::sample_counts
# Chunk 3
design_matrix = data.frame(Replicates = names(counts))
# Chunk 4
design_matrix = design_matrix %>%
mutate(Genotype = gsub("_\\d+$", "",
# replace the underscore and digits at the end of the text
# with nothing
Replicates))
head(design_matrix)
# Chunk 5
counts[5,]
# Chunk 6
genes_not_expressed = rowSums(counts) == 0
genes_not_expressed %>% which() %>% length()
# We keep only rows that are FALSE in the variable genes_not_expressed
counts_filtered = counts[ !genes_not_expressed, ]
# Chunk 7
deseq_dataset = DESeqDataSetFromMatrix(
countData = counts_filtered,
colData = design_matrix, # colData means data about the columns of the count matrix
design = ~Genotype # basically: expression in function of the genotype
) %>% DESeq()
# Chunk 8
resultsNames(deseq_dataset)
# Chunk 9
deseq_dataset2 = DESeqDataSetFromMatrix(
countData = counts_filtered,
colData = design_matrix,
design = ~0 + Genotype # basically: expression in function of the genotype
) %>% DESeq()
resultsNames(deseq_dataset2)
# Chunk 10
resultsNames(deseq_dataset)
name_result = resultsNames(deseq_dataset)
# Chunk 11
# Remove the first element of name_result, since it is just the intercept
results_DESeq2 <-
lapply(name_result[-1], \(comparison) {
results(deseq_dataset,
name = name_result[2],
pAdjustMethod = "BH")@listData %>%
as_tibble() %>%
mutate(
# We need to add the gene names
Gene_name = rownames(counts_filtered),
# We classify the genes by deregulation
State = case_when(
log2FoldChange < 2 ~ "Down-regulated",
log2FoldChange > 2 ~ "Up-regulated",
.default = "equal"),
# Indicate from which comparison the data comes from
Contrast = comparison
)
}) %>%
list_rbind()
head(results_DESeq2)
# Chunk 12
results_DESeq2  %>%
filter(padj < 0.01) %>%
group_by(Contrast) %>%
dplyr::count()
results_DESeq2  %>%
filter(padj < 0.01)
results_DESeq2 %>%
filter(padj < 0.01) %>%
group_by(Contrast, State) %>%
dplyr::count()
# Remove the first element of name_result, since it is just the intercept
results_DESeq2 <-
lapply(name_result[-1], \(comparison) {
results(deseq_dataset,
name = comparison,
pAdjustMethod = "BH")@listData %>%
as_tibble() %>%
mutate(
# We need to add the gene names
Gene_name = rownames(counts_filtered),
# We classify the genes by deregulation
State = case_when(
log2FoldChange < 2 ~ "Down-regulated",
log2FoldChange > 2 ~ "Up-regulated",
.default = "equal"),
# Indicate from which comparison the data comes from
Contrast = comparison
)
}) %>%
list_rbind()
head(results_DESeq2)
results_DESeq2  %>%
filter(padj < 0.01) %>%
group_by(Contrast) %>%
dplyr::count()
results_DESeq2 %>%
filter(padj < 0.01) %>%
group_by(Contrast, State) %>%
dplyr::count()
install.packages("kableExtra")
install.packages("openxlsx")
#| echo: false
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse"),
bioconductor_packages = c("Biostrings", "DESeq2"),
github_packages = "KarenGoncalves/CustomSelection"
)
transformed_counts =
rlogTransformation(deseq_dataset)
# Chunk 1
#| echo: false
#| output: false
#| warning: false
devtools::source_gist("https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978")
install_from_dif_sources(
cran_packages = c("tidyverse"),
bioconductor_packages = c("Biostrings", "DESeq2"),
github_packages = "KarenGoncalves/CustomSelection"
)
# Chunk 2
counts = CustomSelection::sample_counts
# Chunk 3
design_matrix = data.frame(Replicates = names(counts))
# Chunk 4
design_matrix = design_matrix %>%
mutate(Genotype = gsub("_\\d+$", "",
# replace the underscore and digits at the end of the text
# with nothing
Replicates))
head(design_matrix)
# Chunk 5
counts[5,]
# Chunk 6
genes_not_expressed = rowSums(counts) == 0
genes_not_expressed %>% which() %>% length()
# We keep only rows that are FALSE in the variable genes_not_expressed
counts_filtered = counts[ !genes_not_expressed, ]
# Chunk 7
deseq_dataset = DESeqDataSetFromMatrix(
countData = counts_filtered,
colData = design_matrix, # colData means data about the columns of the count matrix
design = ~Genotype # basically: expression in function of the genotype
) %>% DESeq()
# Chunk 8
resultsNames(deseq_dataset)
# Chunk 9
deseq_dataset2 = DESeqDataSetFromMatrix(
countData = counts_filtered,
colData = design_matrix,
design = ~0 + Genotype # basically: expression in function of the genotype
) %>% DESeq()
resultsNames(deseq_dataset2)
transformed_counts =
rlogTransformation(deseq_dataset)
transformed_counts@assays
transformed_counts@assays$data
transformed_counts@assays
transformed_counts@assays@data
assays(transformed_counts)
assays(transformed_counts)[[1]]
assays(transformed_counts)[[1]] %>% head
pca_plot <- plotPCA(transformed_counts)
pca_plot <- plotPCA(transformed_counts,
intgroup = "Genotype")
pca_plot_all <- plotPCA(transformed_counts,
intgroup = "Genotype",
ntop = nrow(counts_filtered))
pca_plot <-
plotPCA(transformed_counts,
intgroup = "Genotype") +
theme_classic()
pca_plot_all <-
plotPCA(transformed_counts,
intgroup = "Genotype",
ntop = nrow(counts_filtered)) + theme_classic()
pca_plot_all
pca_plot <-
plotPCA(transformed_counts,
intgroup = "Genotype") +
ggtitle("Most variable genes (500)") +
theme_classic()
pca_plot_all <-
plotPCA(transformed_counts,
intgroup = "Genotype",
ntop = nrow(counts_filtered)) +
ggtitle("All genes") +
theme_classic()
ggarrange(pca_plot, pca_plot_all, ncol=2)
library(ggpubr)
ggarrange(pca_plot, pca_plot_all, ncol=2)
distance_samples =
rlog_counts %>% t() %>%
dist(method = "euclidean")
rlog_counts = assays(transformed_counts)[[1]]
distance_samples =
rlog_counts %>% t() %>%
dist(method = "euclidean")
rlog_counts = assays(transformed_counts)[[1]]
distance_samples =
rlog_counts %>% t() %>%
dist(method = "euclidean")
dendrogram = hclust(distance_samples)
heatmap(distance_samples,
Rowv=dendrogram,
Cowv=dendrogram)
dendrogram
distance_samples
hclust(distance_samples)
heatmap(distance_samples,
Rowv=dendrogram,
Cowv=dendrogram)
heatmap(x = distance_samples,
Rowv=dendrogram,
Cowv=dendrogram)
distance_samples =
rlog_counts %>% t() %>%
dist(method = "euclidean") %>%
as.matrix
dendrogram = hclust(distance_samples)
distance_samples =
rlog_counts %>% t() %>%
dist(method = "euclidean")
dendrogram = hclust(distance_samples)
heatmap(
x = distance_samples %>%
as.matrix,
Rowv=dendrogram,
Cowv=dendrogram)
distance_samples =
rlog_counts %>% t() %>%
dist(method = "euclidean") %>%
as.matrix
dendrogram = hclust(distance_samples)
View(design_matrix)
View(distance_samples)
distance_samples %>%
as.matrix
heatmap(
x = distance_samples %>%
as.matrix,
Rowv=dendrogram,
Cowv=dendrogram)
heatmap(
x = distance_samples %>%
as.matrix)
heatmap(
x = distance_samples %>%
as.matrix,
Rowv = dendrogram)
heatmap(
x = distance_samples %>%
as.matrix,
Rowv = dendrogram,
Colv=Rowv)
heatmap(
x = distance_samples %>%
as.matrix,
Rowv=dendrogram,
Colv="Rowv")
dendrogram = hclust(distance_samples)
distance_samples =
rlog_counts %>% t() %>%
dist(method = "euclidean")
dendrogram = hclust(distance_samples)
class(dendrogram)
heatmap(
x = distance_samples %>%
as.matrix)
heatmap(
x = distance_samples %>%
as.matrix,
Rowv=as.dendrogram(dendrogram),
Colv="Rowv")
dendrogram =
hclust(distance_samples) %>%
as.dendrogram()
heatmap(
x = distance_samples ,
Rowv=dendrogram,
Colv="Rowv")
heatmap(
x = distance_samples %>% as.matrix(),
Rowv=dendrogram,
Colv="Rowv")

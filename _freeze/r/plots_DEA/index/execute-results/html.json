{
  "hash": "b9670b57ea045c90cf7613be2873cb33",
  "result": {
    "markdown": "---\ntitle: \"Differential expression analysis plots\"\nauthor: \"Karen Cristine Goncalves, Ph.D.\"\ndescription: \"6th R class - transcriptomics sessions\"\nlinkcolor: grey\ncallout-appearance: simple\ncategories:\n  - R advanced\n  - \"Differential gene expression\"\n  - Omics\n  - Transcriptomics\nformat: \n  revealjs:\n    fontsize: 1.5em\n    transition: none\n    theme: dark\n    scrollable: true\ndate: \"28 March 2024\"\nincremental: false\necho: true\nwarning: false\neval: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n## Input data and DESeq2 analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::source_gist(\"https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978\")\n\ninstall_from_dif_sources(\n\tcran_packages = c(\"tidyverse\", \"patchwork\"),\n\tbioconductor_packages = c(\"Biostrings\", \"DESeq2\", \"ggtree\")\n)\n\ntheme_classic() %>% theme_set\n```\n:::\n\n\n## Code from previous class: Prepare input {auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncounts = read.csv(\"https://karengoncalves.github.io/Programming_classes/exampleData/Arabidopsis_counts.csv\",\n                  header = T, row.names = 1)\n```\n:::\n\n\n## Code from previous class: Prepare input {auto-animate=\"true\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ncounts = read.csv(\"https://karengoncalves.github.io/Programming_classes/exampleData/Arabidopsis_counts.csv\",\n                  header = T, row.names = 1)\n\ndesign_matrix = \n  data.frame(Replicates = names(counts)) %>%\n  mutate(Genotype = \n           gsub(\"_\\\\d+$\", \"\", \n                Replicates))\n```\n:::\n\n\n## Code from previous class: Prepare input {auto-animate=\"true\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ncounts = read.csv(\"https://karengoncalves.github.io/Programming_classes/exampleData/Arabidopsis_counts.csv\",\n                  header = T, row.names = 1)\n\ndesign_matrix = \n  data.frame(Replicates = names(counts)) %>%\n  mutate(Genotype = \n           gsub(\"_\\\\d+$\", \"\", \n                Replicates))\n\ngenes_not_expressed = rowSums(counts) == 0\ncounts_filtered = counts[ !genes_not_expressed, ]\n```\n:::\n\n\n## Code from previous class: Main analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeseq_dataset = DESeqDataSetFromMatrix(\n  countData = counts_filtered,\n  colData = design_matrix, # colData means data about the columns of the count matrix\n  design = ~Genotype # basically: expression in function of the genotype\n) %>% DESeq()\n```\n:::\n\n\n## Code from previous class: Get the results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_DESeq2 <- \n  lapply(resultsNames(deseq_dataset)[-1], \\(comparison) {\n    results(deseq_dataset, \n            name = comparison,\n            pAdjustMethod = \"BH\")@listData %>%\n      as_tibble() %>%\n      mutate(\n        Gene_name = rownames(counts_filtered),\n        State = case_when(\n          log2FoldChange < -2 & padj < 0.01 ~ \"Down-regulated\",\n          log2FoldChange > 2 & padj < 0.01 ~ \"Up-regulated\",\n          .default = \"equal\"),\n        Contrast = comparison\n      )\n  }) %>%\n  list_rbind() \n```\n:::\n\n\n# Check for sample homogeneity\n\nThere are two basic ways we can check for sample homogeneity, meaning how similar the replicates of a sample are to each other: principal component analysis (PCA) or clustering analysis. \n\nTo perform either of them, we need to use the normalized data, not the read counts. \n\n## Normalize counts\n\nYou can either use `rlogTransformation` or `varianceStabilizingTransformation` for PCA, as they return an object that includes the metadata. The first takes about 5x longer than the second, but results are similar. Check the help page for details on the computation.\n\nTo see the transformed counts, you need to run `assay` on the result.\n\n- `rlogTransformation`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrlog_transformed = rlogTransformation(deseq_dataset)\nassay(rlog_transformed) %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Control_1 Control_2 Control_3 Control_4 Mlp37347_1 Mlp37347_2\nAT1G01010  6.856238  6.614363  6.614790  6.165110   5.471233   5.796102\nAT1G01020  7.337836  7.045180  7.355484  7.501417   7.186908   7.253583\nAT1G01030  6.490673  6.253299  6.147981  6.267220   6.017791   6.081412\nAT1G01040  9.989951  9.705570  9.593858  9.700406   9.418827   9.425975\nAT1G01050  8.486265  8.897727  9.000133  9.285109   8.968637   8.808020\nAT1G01060 12.205905 12.287763 12.279939 11.944880   9.507479   9.424758\n          Mlp37347_3 Mlp37347_4 Mlp124499_1 Mlp124499_2 Mlp124499_3 Mlp124499_4\nAT1G01010   5.535472   5.900682    5.783818    5.766419    6.128911    5.693272\nAT1G01020   7.104379   7.029025    7.304103    7.097543    7.095395    7.089999\nAT1G01030   6.232429   6.298843    5.790084    5.812633    5.870933    6.115346\nAT1G01040   9.402218   9.495822    9.673989    9.839446    9.826400    9.283701\nAT1G01050   8.940594   9.085135    8.816797    8.795406    8.148923    9.082900\nAT1G01060   9.575817  10.642220   10.511861   10.605765   10.339630   12.211014\n```\n:::\n:::\n\n\n- `varianceStabilizingTransformation` (VST)\n\n::: {.cell}\n\n```{.r .cell-code}\nVST_data = varianceStabilizingTransformation(deseq_dataset)\nassay(VST_data) %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Control_1 Control_2 Control_3 Control_4 Mlp37347_1 Mlp37347_2\nAT1G01010  7.590094  7.234199  7.235298  6.594604   5.592357   6.065537\nAT1G01020  7.590094  7.149626  7.613059  7.822869   7.363027   7.462015\nAT1G01030  7.025739  6.670862  6.517423  6.687298   6.327689   6.420063\nAT1G01040 10.215535  9.790676  9.620667  9.782615   9.349971   9.360973\nAT1G01050  8.335243  8.978957  9.133170  9.552363   9.085613   8.842539\nAT1G01060 12.768174 12.878989 12.868370 12.406869   8.429246   8.248008\n          Mlp37347_3 Mlp37347_4 Mlp124499_1 Mlp124499_2 Mlp124499_3 Mlp124499_4\nAT1G01010   5.660322   6.212961    6.038054    6.014203    6.547341    5.910029\nAT1G01020   7.238271   7.122962    7.538112    7.228004    7.224890    7.217355\nAT1G01030   6.642055   6.739925    5.976459    6.014203    6.103966    6.469575\nAT1G01040   9.323073   9.469278    9.742963    9.991844    9.972339    9.135749\nAT1G01050   9.043900   9.260498    8.855706    8.822978    7.784839    9.256563\nAT1G01060   8.562044  10.476041   10.264868   10.417590    9.978984   12.774389\n```\n:::\n:::\n\n\n## PCA {auto-animate=\"true\"}\n\nDESeq2 offers a function for PCA that takes the result from either of the two functions and returns a ggplot object. \n\nBecause of this, we can add things to the plot as if it was a ggplot.\n\n::: {.cell}\n\n```{.r .cell-code}\nplotPCA(rlog_transformed, \n        intgroup = \"Genotype\", # color samples by\n        ntop = nrow(counts_filtered)) #use how many genes for the computation\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n## PCA {auto-animate=\"true\"}\n\nDESeq2 offers a function for PCA that takes the result from either of the two functions and returns a ggplot object. \n\nBecause of this, we can add things to the plot as if it was a ggplot.\n\n::: {.cell}\n\n```{.r .cell-code}\nplotPCA(rlog_transformed, \n        intgroup = \"Genotype\", # color samples by\n        ntop = nrow(counts_filtered)) + #use how many genes for the computation\n  theme_classic() +\n  labs(color =  \"\") +\n  scale_color_manual(values = c(\"Control\" = \"black\",\n                                  \"Mlp37347\" = \"red\",\n                                  \"Mlp124499\" = \"blue\")\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n## Clustering\n\nHierarchical clustering is a graphical way to show the pairwise similarity between samples.\n\nWe just need to edit the rlog_transformed or the VST_data so that the samples are shown in the rows and the genes in the columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance_data = \n  rlog_transformed %>%\n  assay() %>%\n  t %>% dist() # default is euclidean\n\ncluster_hc = hclust(distance_data)\nplot(cluster_hc)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n## Add a heatmap\n\nYou can show the dendrogram and the distance matrix in a heatmap\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance_data %>%\n  as.matrix %>%\n  stats::heatmap(Rowv = as.dendrogram(cluster_hc),\n                 symm = T)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n## Improved heatmap + dendrogram: prepare data {auto-animate=\"true\"}\n\nIf you want to plot it with ggplot to have more control, you need to do some transformations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pivot longer the distance matrix and add the row names\nlong_distance <- \n  distance_data %>% as.matrix() %>% as_tibble() %>%\n  # rownames of the distance matrix are in the attr(ibute) Labels\n  mutate(Rep1 = attr(distance_data, which = \"Labels\")) %>% \n  pivot_longer(cols = !Rep1,\n               names_to = \"Rep2\", \n               values_to = \"distance\")\n```\n:::\n\n\n## Improved heatmap + dendrogram: prepare data {auto-animate=\"true\"}\n\nIf you want to plot it with ggplot to have more control, you need to do some transformations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pivot longer the distance matrix and add the row names\nlong_distance <- \n  distance_data %>% as.matrix() %>% as_tibble() %>%\n  # rownames of the distance matrix are in the attr(ibute) Labels\n  mutate(Rep1 = attr(distance_data, which = \"Labels\")) %>% \n  pivot_longer(cols = !Rep1,\n               names_to = \"Rep2\", \n               values_to = \"distance\")\n\n# Add a column with the relative distance of the samples\n(max_distance = max(long_distance$distance))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 106.0121\n```\n:::\n\n```{.r .cell-code}\nlong_distance = long_distance %>%\n  mutate(Rel_distance = (distance / max_distance) * 100)\n```\n:::\n\n\n## Improved heatmap + dendrogram: prepare data {auto-animate=\"true\"}\n\nIf you want to plot it with ggplot to have more control, you need to do some transformations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pivot longer the distance matrix and add the row names\nlong_distance <- \n  distance_data %>% as.matrix() %>% as_tibble() %>%\n  # rownames of the distance matrix are in the attr(ibute) Labels\n  mutate(Rep1 = attr(distance_data, which = \"Labels\")) %>% \n  pivot_longer(cols = !Rep1,\n               names_to = \"Rep2\", \n               values_to = \"distance\")\n\n# Add a column with the relative distance of the samples\n(max_distance = max(long_distance$distance))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 106.0121\n```\n:::\n\n```{.r .cell-code}\nlong_distance = long_distance %>%\n  mutate(Rel_distance = (distance / max_distance) * 100)\n\n# Sort the sample names according to the dendrogram\nlong_distance$Rep1 = \n  factor(long_distance$Rep1, \n         levels = cluster_hc$labels[cluster_hc$order]\n  )\nlong_distance$Rep2 = \n  factor(long_distance$Rep2, \n         levels = cluster_hc$labels[cluster_hc$order]\n  )\n```\n:::\n\n\n## Improved heatmap + dendrogram: plots\n\n- Tree should not have the tip labels, cause the labels will be the axis of the heatmap\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(sample_dendro = ggtree(cluster_hc, \n                        branch.length = \"none\", \n                        ladderize = F) +\n    coord_cartesian(xlim = c(0, 7))\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n- Prepare the heatmap without axes titles and remove the text from the x-axis.\n\n::: {.cell}\n\n```{.r .cell-code}\n(heatmap_distance = long_distance %>%\n  ggplot() +\n  geom_tile(aes(x = Rep1, y = Rep2, fill = Rel_distance)) +\n  scale_fill_gradient(high = \"white\",\n                      low = \"black\",\n                      name = \"Relative\\nDistance (%)\") +\n  theme_classic() +\n  theme(axis.text.x = element_blank(),\n        axis.title = element_blank()) \n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n- Join plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrap_plots(sample_dendro, heatmap_distance, \n           widths = c(2, 8))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n\n# Plots of gene deregulation\n\n## Volcano plots - Basic\n\nNormally, we want to plot the deregulated genes, find patterns among them, etc. The first thing we can plot is a volcano plot for each contrast checked. \n\nIt is simply the fold change in the x-axis and the -log<sub>10</sub>p-adj in the y-axis.\n\nNote that there are cases where the p-value, and thus the adjusted p-value, are NA, so we will create a new variable that replaces NA with 1 (those genes are not deregulated)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(basic_volcanos = results_DESeq2 %>%\n  mutate(new_padj = ifelse(is.na(padj), 1, padj)) %>%\n  ggplot(aes(x = log2FoldChange, y = -log10(new_padj),\n             color = State, alpha = State)) +\n  geom_point() +\n  facet_wrap(~Contrast)\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n## Improve aesthetics {auto-animate=\"true\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nbasic_volcanos +\n  xlim(-10, 10) +\n  scale_color_manual(name = \"\", values =\n                       c(\"Up-regulated\" = \"red\",\n                         \"Down-regulated\" = \"blue\",\n                         \"equal\" = \"grey\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n## Improve aesthetics {auto-animate=\"true\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nbasic_volcanos +\n  xlim(-10, 10) +\n  scale_color_manual(name = \"\", values =\n                       c(\"Up-regulated\" = \"red\",\n                         \"Down-regulated\" = \"blue\",\n                         \"equal\" = \"grey\")) +\n  scale_alpha_manual(name = \"\", values =\n                       c(\"Up-regulated\" = 1,\n                         \"Down-regulated\" = 1,\n                         \"equal\" = 0.3))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n## Improve aesthetics {auto-animate=\"true\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbasic_volcanos +\n  xlim(-10, 10) +\n  scale_color_manual(name = \"\", values =\n                       c(\"Up-regulated\" = \"red\",\n                         \"Down-regulated\" = \"blue\",\n                         \"equal\" = \"grey\")) +\n  scale_alpha_manual(name = \"\", values =\n                       c(\"Up-regulated\" = 1,\n                         \"Down-regulated\" = 1,\n                         \"equal\" = 0.3)) +\n   labs(x = expression(\"log\"[2]~\"Fold Change\"),\n       y = expression(\"-log\"[10]~\"adjusted p-Value\")) +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n## Heatmap of deregulated genes - prepare input\n\nIn our case, we just have one factor (Genotype) in the design formula, and both contrasts are against the control sample. \n\nSo we can modify the table of results to remove the redundant information\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_DESeq2_filtered = results_DESeq2 %>%\n  mutate(shortContrast = gsub(\"Genotype_(\\\\w+)_vs_Control\",\n                              \"\\\\1\", Contrast)\n  ) %>%\n  filter(abs(log2FoldChange) > 2 & padj < 0.01)\n```\n:::\n\n\nNow we also want to sort the genes so that the ones with similar deregulation are grouped together. We can use a cluster analysis for that.\n\nBut, we need to use a wide table, not a long one, to compute the distance matrix. We will also filter out the genes that are not deregulated, so that the analysis don't consider non-significant differences.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwide_results =  results_DESeq2_filtered %>%\n  pivot_wider(id_cols = \"Gene_name\", \n              names_from = shortContrast, \n              values_from = log2FoldChange,\n              values_fill = 0) %>%\n  as.data.frame()\nrownames(wide_results) = wide_results$Gene_name\n```\n:::\n\n\n- `values_fill = 0`: after filtering, there will be genes with fold change levels present for only one contrast because they are not deregulated in the other condition. Since in the wide format, we need values for both contrasts, we replace the empty cell with 0.\n\n## Heatmap of deregulated genes - gene clustering\n\nNow we can use `wide_results` in the `dist` function? \n\nYes, after we remove the `Gene_name` column (dist only accepts numbers)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncluster_genes = \n  wide_results[-1] %>%\n  dist() %>%\n  hclust\n\nggtree(cluster_genes, layout = \"dendrogram\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-25-1.png){width=960}\n:::\n:::\n\nNow we just make a column of ordered genes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_DESeq2_filtered =\n  results_DESeq2_filtered %>%\n  mutate(orderedGenes = \n           factor(Gene_name, \n                  levels = cluster_genes$labels[cluster_genes$order])\n         )\n```\n:::\n\n\n\n## Heatmap of deregulated genes - plot {auto-animate=\"true\"}\n\nWhether you plot the genes in the x or in the y axis depends on how readable the plot is in the end (how many genes are deregulated, how many contrasts you have, etc)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_DESeq2_filtered %>%\n  ggplot(aes(x = orderedGenes, y = shortContrast, \n             fill = ifelse(abs(log2FoldChange) > 2 & padj < 0.01,\n                           log2FoldChange, 0)\n  )) +\n    geom_tile() \n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-27-1.png){width=960}\n:::\n:::\n\n## Heatmap of deregulated genes - plot {auto-animate=\"true\"}\n\nWhether you plot the genes in the x or in the y axis depends on how readable the plot is in the end (how many genes are deregulated, how many contrasts you have, etc)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_DESeq2_filtered %>%\n  ggplot(aes(x = orderedGenes, y = shortContrast, \n             fill = ifelse(abs(log2FoldChange) > 2 & padj < 0.01,\n                           log2FoldChange, 0)\n  )) +\n    geom_tile() +\n  scale_fill_gradient2(name = \"Fold change\",\n                       mid = \"white\", \n                       low = \"midnightblue\", \n                       high = \"red\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-28-1.png){width=960}\n:::\n:::\n\n\n## Heatmap of deregulated genes - plot {auto-animate=\"true\"}\n\nWhether you plot the genes in the x or in the y axis depends on how readable the plot is in the end (how many genes are deregulated, how many contrasts you have, etc)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_DESeq2_filtered %>%\n  ggplot(aes(x = orderedGenes, y = shortContrast, \n             fill = ifelse(abs(log2FoldChange) > 2 & padj < 0.01,\n                           log2FoldChange, 0)\n  )) +\n    geom_tile() +\n  scale_fill_gradient2(name = \"Fold change\",\n                       mid = \"white\", \n                       low = \"midnightblue\", \n                       high = \"red\") +\n  theme(axis.title = element_blank(),\n        axis.text.x = element_blank(),\n        legend.position = \"bottom\",\n        axis.ticks = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-29-1.png){width=960}\n:::\n:::\n\n\n## Resources\n\n- Hierarchical clustering\n- PCA\n- Variance stabilizing transformation\n- Regularized log transformation\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "a16f2b4e6644239fda1563c7390ddb61",
  "result": {
    "markdown": "---\ntitle: \"Excel files in R\"\nauthor: \"Karen C. Goncalves dos Santos\"\ncallout-appearance: simple\ndate: \"4 November 2023\"\ncategories:\n  - \"R intermediary\"\n  - Spreadsheets\n  - \"Excel import and export\"\n  - Input files\nformat: html\n---\n\n<style>\ncode{\n\tfont-size:1.1em;\n\tcolor:yellow;\n\tbackground-color:#2b2b2b;\n\tborder-radius:.25rem;\n\tpadding:.125rem .25rem;\n\tword-wrap:break-word\n}\n\ncode span {font-size: 1.1em}\ncode span.fu {color: yellow}\n\n</style>\n\n\n## Reading and writing spreadsheets\n\nIf you have only one sheet in a spreadsheet, the easiest thing to do is to save it as `.csv` or `.txt` and open it with `read.XXXX` or `read_XXXX`. Spreadsheets use more space and take longer to be opened.\n\nAs for writing, if it is only one table, you can save it as `.csv` or `.txt` with `write.csv` or `write.table` and then open with a spreadsheet reader (ie. excel). \n\nIf you prefer working with spreadsheets, you can read them in R with the `readxl` package and you can write spreadsheets with the package `openxlsx`.\n\n### Read excel spreadsheets\n\n`readxl` package - Part of the `tidyverse` package\n\nAllows you to:\n\n- Check the names of the sheets of an excel file: `excel_sheets(MY_EXCEL_FILE)`\n- Read sheets of an excel file as tibbles (a type of data.frame): \n\t- `read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET)`\n\t- You can specify what defines NA: `read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET, na = \".\")`\n\t- Instead of `header = T`, you use `col_names = T`\n\t- You can specify the number of rows to skip in the beginning with `skip = N`\n\t- You can specify the number of rows to read with `n_max = N`\n\t- You can specify which cols and rows to read with `range = \"H40:T80\"`\n\t\t- If `range` is specified, `skip` and `n_max` are ignored\n\t\t- You can include the name of the sheet: `range = \"MY_SHEET!H40:T80\"`\n\t\t\t- <span style=\"color: red\">SHEET</span><span style=\"color: cyan\"> EXCLAMATION_POINT </span><span style=\"color: yellow\">CELL_RANGE\n\n### Write spreadsheets\n\nIf you have many tables you want to export as different sheets in the same spreadsheet, you can put them all in a single list then \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(openxlsx)\noutFile = \"iris.xlsx\"\n# I split the data.frame iris into 3, one per species, so it is easy to understand the output\nspecies_iris = unique(iris$Species)\nmy_tables = \n\tsapply(species_iris, simplify = F, \\(x) {\n\t\tiris %>% filter(Species == x)\n\t})\n\nwrite.xlsx(my_tables, \n\t   file = outFile)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
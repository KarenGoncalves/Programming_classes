{
  "hash": "503f598c001cbf5392ad4a77abb08245",
  "result": {
    "markdown": "---\ntitle: \"Working with text\"\nauthor: \"Karen C. Goncalves dos Santos\"\ncallout-appearance: simple\ndate: \"1 December 2023\"\ncategories:\n  - \"R intermediary\"\n  - Regex\n  - \"Text manipulation\"\nformat: html\n---\n\n<style>\ncode{\n\tfont-size:1.1em;\n\tcolor:yellow;\n\tbackground-color:#2b2b2b;\n\tborder-radius:.25rem;\n\tpadding:.125rem .25rem;\n\tword-wrap:break-word\n}\n\ncode span {font-size: 1.1em}\ncode span.fu {color: yellow}\n\n</style>\n\n\n## Search, replace and split text\n\n### Regular expressions (Regex)\n\nThese are ways to search text without writing the explicitly what you are searching. \n\nThis allows you to search for multiple texts at the same time, or to search for something without knowing how it is written exactly\n\n- Patterns (what to search)\n\t- any digit: `\"\\\\d\"` \n\t- any word character (letters, _, digits): `\"\\\\w\"` \n\t- any character (including special symbols and space): `\".\"`\n\t- If you want to create your set of characters allowed in the pattern, just use `[]`\n\t\t- I want to search only uppercase letters: `\"[A-Z]\"`\n\t\t- Special symbols: `\"[\\\\.\\\\*\\\\-]\"` (put two backslashes `\\\\` before the symbol)\n\n- Quantifiers (how many times the pattern occurs)\n\t- Specific number of times: `A{X}`, where X is the number of times A appears\n\t- Between X and Y times: `e{X,Y}`, e appears at least X times, at most Y times (_in tandem_)\n\t- At least X times, but can be more: `T{X,}` (nothing after the \",\" means INFINITY)\n\t- At least once, but can be more: `N+`\n\t- May not appear, may appear multiple times: `C*`\n\n- Anchors\n\t- Text MUST start with the pattern \"ATG\": `\"^ATG\"` (start pattern with `^`)\n\t- Transcript must end with stop codon: `\"T[GA][GA]$\"` (end pattern with `$`)\n\n### Split strings (text)\n\nUse symbol or letter to split a text into a vector (similar to excel's \"text to columns\" command)\n\nExample: arabidopsis genes are named as \"AT\" chromosome number \"G\" gene number. So we can separate the gene number from the chromosome number using \"G\" as the pattern/split.\n\n:::{.panel-tabset}\n# Basic r: `strsplit(x, split)`\n\n- `x` is a character vector\n- `split` is the symbol/letter that will be used to separate the text\n- The result is a list. If `x` has 10 elements, the resulting list will have also 10 elements, each one a character vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n\n# With strsplit and str_split, in each list, the chromosome number is the first element, the gene number is the second\nstrsplit(x = Arabidopsis_Genes, split = 'G')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"AT1\"   \"01020\"\n\n[[2]]\n[1] \"AT1\"   \"01030\"\n\n[[3]]\n[1] \"AT1\"   \"01040\"\n```\n:::\n:::\n\n\n# `stringr` package: \n\n- `str_split` - same as basic r command `strsplit`, `x` is called `string` and `split` is called `pattern`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\nlibrary(stringr)\nstr_split(string = Arabidopsis_Genes, pattern = \"G\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"AT1\"   \"01020\"\n\n[[2]]\n[1] \"AT1\"   \"01030\"\n\n[[3]]\n[1] \"AT1\"   \"01040\"\n```\n:::\n:::\n\n\n- `str_split_1` - string has to be a character vector of size 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n\n# str_split_1 accepts only one element at a time\n# The result is the same as str_split(string = Arabidopsis_Genes, pattern = \"G\")[[1]]\nstr_split_1(string = Arabidopsis_Genes[1], pattern = \"G\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"AT1\"   \"01020\"\n```\n:::\n:::\n\n\n\n- `str_split_fixed(string, pattern, n)` - similar to `str_split`, but the result is a matrix (vector with columns and rows). You need to specify `n`, the max number of pieces to return for each string from the input\n\n\n::: {.cell}\n\n```{.r .cell-code}\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n# str_split_fixed returns a matrix with nrow == length(string) and ncol == n\nstr_split_fixed(string = Arabidopsis_Genes, pattern = \"G\", n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]  [,2]   \n[1,] \"AT1\" \"01020\"\n[2,] \"AT1\" \"01030\"\n[3,] \"AT1\" \"01040\"\n```\n:::\n:::\n\n\n\n- `str_split_i(string, pattern, i)` - similar to `str_split_fixed`, but `i` is used to specify which column we want to keep from the matrix.\n\n::: {.cell}\n\n```{.r .cell-code}\nArabidopsis_Genes = c(\"AT1G01020\", \"AT1G01030\",\"AT1G01040\")\n# With str_split_i, you specify which part of the string you want to keep after the split\n# If we want to keep just the gene number in this case, we select the second part, the one that comes after \"G\"\nstr_split_i(string = Arabidopsis_Genes, pattern = \"G\", i = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"01020\" \"01030\" \"01040\"\n```\n:::\n:::\n\n\n:::\n\n### Search for word or pattern: grep and grepl\n\nBoth are similar to \"CTRL+F\", but have some extra capabilities.\n\n:::{.panel-tabset}\n# Basic command\n\n`grep(pattern, x, fixed = F)` where\n\n- `pattern` is the word of Regex to search\n- `x` is the character vector or even data.frame in which you are searching\n- If `fixed` is omitted or F, search will allow regex, else it will take patterns as literal words (meaning \\\\w will match only \\\\w, not \"any letter, number or _\") \n\n# Specifics\n\n`grep` result is either a vector with the index of the match:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames_students = c(\"Fadoua\", \"Arghavan\", \"Serge\", \"Snehi\", \"Valeria\")\ngrep(\"a\", names_students)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 5\n```\n:::\n\n```{.r .cell-code}\n# The result is c(1, 2, 5), because the names containing the letter \"a\" are the 1st, 2nd and 5th elements of the input \n```\n:::\n\n\nYou can ask `grep` to return the matches instead of their indices by adding `value = T`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames_students = c(\"Fadoua\", \"Arghavan\", \"Serge\", \"Snehi\", \"Valeria\")\ngrep(\"a\", names_students, value = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Fadoua\"   \"Arghavan\" \"Valeria\" \n```\n:::\n:::\n\n\n`grepl` returns a vector of the same size as the input with only TRUE or FALSE\n\n::: {.cell}\n\n```{.r .cell-code}\nnames_students = c(\"Fadoua\", \"Arghavan\", \"Serge\", \"Snehi\", \"Valeria\")\ngrepl(\"a\", names_students)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\n# Because the question asked is \"is the letter \"a\" in element1, element2... you cannot use the argument `value = T`\n```\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
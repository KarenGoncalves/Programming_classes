{
  "hash": "0ec151c0aa8b913c7430bbc0cc6bb2be",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Sequences and repetitions\"\nauthor: \"Karen C. Goncalves dos Santos\"\ncallout-appearance: simple\ncategories:\n  - \"R basics\"\n  - Numbers\ndate: \"3 October 2023\"\nformat: html\n---\n\n<style>\ncode{\n\tfont-size:1.1em;\n\tcolor:yellow;\n\tbackground-color:#2b2b2b;\n\tborder-radius:.25rem;\n\tpadding:.125rem .25rem;\n\tword-wrap:break-word\n}\n\ncode span {font-size: 1.1em}\ncode span.fu {color: yellow}\n\n</style>\n\n\n\n## `seq()` and `rep` fucntions\n\n### `seq`\n\nUse the command `seq` to get a sequence of numbers. You can specify the interval between every number shown. The function is writen as:\n`seq(FROM, TO, INTERVAL)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1, 2, 0.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0\n```\n\n\n:::\n:::\n\n\nIf you want to see every integer between two numbers you can use `:` or you can omit the interval in the `seq` command.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get very integer between 0 and 10\nseq(0, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  0  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\n0:10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  0  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get every integer between 0 and 10 in decreasing order\nseq(10, 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 10  9  8  7  6  5  4  3  2  1  0\n```\n\n\n:::\n\n```{.r .cell-code}\n10:0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 10  9  8  7  6  5  4  3  2  1  0\n```\n\n\n:::\n:::\n\n\n### `rep`\n\nSyntax: `rep(X, TIMES, EACH)`\n\n- X - what you want to repeat: vector of characters, numbers or logical (T/F)\n- TIMES: repeat how many times\n- EACH: if there is more than one element in WHAT, you repeat the first, then the second...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# repeat X (1 in this case) 4 times\nrep(1, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 1 1\n```\n\n\n:::\n\n```{.r .cell-code}\n# repeat X (vector c(1, 2)) 4 times\nrep(c(1, 2), 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 1 2 1 2 1 2\n```\n\n\n:::\n\n```{.r .cell-code}\n# repeat the elements of the input 4 times each\nrep(c(1, 2), each = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 1 1 2 2 2 2\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "5be20581472d8dccacc841e933b2227b",
  "result": {
    "markdown": "---\ntitle: \"R class - basics\"\nfontsize: 1.25em\nlinkcolor: grey\ncallout-appearance: simple\ncategories:\n  - R basics\nresources: \n  - /media/Create_variable.png\n  - /scripts_for_class/script_class1t.R\nformat: \n  revealjs:\n    transition: none\n    theme: dark\n    scrollable: true\nauthor: \"Karen Cristine Goncalves, Ph.D.\"\ndate: \"10 August 2023\"\nincremental: false\n---\n\n\n\n## Variables\n\nTo work with your files, create new data and work with it, etc., you will want to save your things into R's memory. \n\nThese things are variables. \n\n- Every person you know is stored in your brain as a variable (their names)\n- Every contact in your cellphone is a variable that stores their names, phone number, email, etc.\n\n## Variables - save your things in R\n\nHow to create a variable in R:\n\n- Start with the name you want\n- Use `=` or `<-` to separate the name from the value you want it to store\n\n![](./media/Create_variable.png)\n\n## Variable names\n\n\n\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-minimal\" style='font-family: \"Trebuchet MS\", verdana, sans-serif; margin-left: auto; margin-right: auto;'>\n<caption>Give meaningful names to your variables, or else you may not remember what they are when you read the script later </caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Bad names </th>\n   <th style=\"text-align:left;\"> Why? </th>\n   <th style=\"text-align:left;\"> Good names </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> x, y, z, counts </td>\n   <td style=\"text-align:left;\"> x, y, z don't tell us what the data there has, so you will not know later what you used </td>\n   <td style=\"text-align:left;\"> rawCountsRNAseq, fluorescenceTableDay1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> bacteriacountsforday5 </td>\n   <td style=\"text-align:left;\"> Could be a good name, but is difficult to read, use upper and lower case or _ to improve readability </td>\n   <td style=\"text-align:left;\"> bacteriaCountsForDay5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> microplate </td>\n   <td style=\"text-align:left;\"> Does not tell what kind of data is stored </td>\n   <td style=\"text-align:left;\"> microplateFluorescence, microplateConcentration, microplateOD </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n\n\n. . .\n\n- Cannot start with numbers\n- Cannot have symbols, eg. `*(),\\/\"';:<>{}[]~!@#$%^+=`\n- Cannot have space\n\n\n## Functions - work with your data\n\nYou use R to do something with your data:\n\n- Calculate stats, eg. mean, standard deviation\n- Know if two or more groups are different with T-test or ANOVA. \n\n- You do these things using functions.\n\n. . .\n\nThey are simply a bunch of code stored in a variable with an specific name.<br>\nYou use them by typing the **name** followed by **`()`**. <br>\nMost of the time, you need to put something inside the `()`, eg. a table, a column in a table, several numbers, etc. \n\n- If you do not know how to use a function, ask for help (which is also a function!):\n\n:::{.callout-note collapse=\"true\"}\n`help(\"mean\")` or `?mean` will open a page in your browser (if you are using R) or the tab \"Help\" (if you are using RStudio) with an explanation of what the function does and how to use it\n:::\n\n## Functions - examples\n\nYou load files into R using functions: `read.delim()`, `read.csv()`, `read_csv()` (this is different to the previous one)\n\n- Eg. myFile.txt is in the \"Input\" folder of my project, it is a table with column names (headers) and row names, the columns are separated by tabs (`\"\\t\"`)<br>`myFile <- read.delim(file = \"Input/myFile.txt\", header = T, row.names = 1)`\n\t1. `\"Input/myFile.txt\"` = where the file is stored, has to be inside single or double quotes\n\t2. `header = T` or `header = TRUE` are the same thing, but all CAPS always\n\t3. `row.names = 1` tells R which column has the  information that identifies each row as a different thing, you can use any column here, or you can omit this\n\t- Each of the three things above (arguments) are separated from each other inside the function by `,` (try writing a function without commas and see what happens)\n\t\n. . . \n\n:::{.callout-note collapse=\"true\"}\n## Column separation\n`read.delim()` was made to read tables with columns separated by tabs\n\n- If the columns were separated by something else, like `;`, you would write:<br> `myFile <- read.delim(file = \"Input/myFile.txt\", header = T, row.names = 1, sep = \";\")`\n:::\n\n\n## Exercise - load table into R\n\nLoad your dataset (from the preparatory slides <a href=\"../r/Before_1stClass.html\" style=\"color: red\"> To do before the first class</a>) and save it to the variable `\"myFirstInput\"`\n\n- Comma-separated values: <br> `myFirstInput = read.csv(\"Input/myData.csv\", header = T)`\n- Comma-separated values:  <br> `myFirstInput = read.delim(\"Input/myData.csv\", header = T, sep = \",\")`\n\n## Functions to check your table\n\nIf you want to see that the file is okay, you can check if the beginning and end of the table looks right:\n\n- `head(myFirstInput)` - will print the first 6 rows of a table. \n- `tail(myFirstInput)` - will print the last 6 rows of a table. \n\n\t- For both, you can change the number of lines printed by adding `n=x`, where `x` is the number of lines you want to see\n\t\n\t- `head(myFirstInput, n=5)`\n\n## Functions to check your table\n\n- `str(myFirstInput)` - will show the <u>**str**</u>ucture of your table\n\t\n\t- Its class (data.frame or tibble are types of tables)\n\t- The number of rows (observations) and columns (variables)\n\t- The type of data inside each column and the their first few values \n\n- `summary(myFirstInput)` - if the values are numbers, will calculate the quantiles and mean of each column\n\n\n## Know the types of data\n\nIf you enter a text in a column that has numeric data, the column will be treated as text (character)\n\n- With numeric columns, `summary()` acts as in the previous slide\n- With text columns, there are 2 options:\n\t- character: will print the length, class and mode (most common value) of the column\n\t- factor (categories): will print each category and their frequency\n\t\n- Characters cannot be transformed into numbers, factors (categories) can!\n\t- That is because factors have levels (category 1, category 2, ...), and to save space, R simply remember the level of each line\n\n## Test - difference between text and categories\n\nUse R built-in data to see the difference between characters and factors\n\n:::{.callout-note collapse=\"true\"}\nLETTERS and letters are vectors (a list of values of same type) of upper/lower case letters\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyLetters = as.factor(letters) \n\nas.numeric(myLetters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26\n```\n:::\n\n```{.r .cell-code}\nas.numeric(letters)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA\n[26] NA\n```\n:::\n:::\n\n\n\n. . .\n\n:::{.callout-note collapse=\"true\"}\n\n:::{.nonincremental}\n- Functions\n\t- **`as.numeric(X)`** is a function that transforms the data in X into numbers, _if it is possible_.\n\t- **`as.factor`** is a function that transforms the vector into a factor\n:::\n\n:::\n\n:::{.callout-caution collapse=\"true\"}\n**`NA`** means \"Not Available\", R does not know what to do with characters when you want numbers from it, so the result is \"not available\"\n\n**`NaN`** means \"Not A Number\"; **`Inf`** means \"infinite\"\n:::\n\n:::{.callout-tip collapse=\"true\"}\nHover your mouse over the code and a button to copy the whole code block will appear!\n:::\n\n## Exercise - playing with datasets already in R\n\nR has datasets already loaded for classes like these.\n\n- Check what the **`PlantGrowth`** dataset looks like\n\n\t- ``` head(PlantGrowth) ```\n\t- ``` summary(PlantGrowth) ``` \n\n- Save **`PlantGrowth`** into your environment with a new name\n\n\t- `myPlantGrowth = PlantGrowth`\n\n. . .\n\n:::{.callout-tip collapse=\"true\"}\n## Explain your code with comments\n\nInside R (as well as unix and python), anything you write after a `#` in a line is not read by the computer. You can use this to explain your code in your own words so you and anyone reading your code can understand it.\n:::\n\n## Row selection\n\nIf you load your data and indicate the column containing the names of the rows, you can use the name of the row\n\nIf you did not set the row names, just use the number of the row.\n\n:::{.callout-tip collapse=\"true\"}\n## HOW TO\ntable_name**[ row_name , ]** \n\nThe row name/number HAS TO come BEFORE the `\",\"`\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyPlantGrowth = head(PlantGrowth)\n\n# Use the name of the table, and [], inside put the number of the row followed by \",\"\nmyPlantGrowth[1,] # prints the first row\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  weight group\n1   4.17  ctrl\n```\n:::\n\n```{.r .cell-code}\n# See and set rownames with the function rownames\nrownames(myPlantGrowth)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\"\n```\n:::\n\n```{.r .cell-code}\nrownames(myPlantGrowth) = 6:1 # creates a sequence starting from 30 and ending in 1\n```\n:::\n\n\n\n\n## Column selection\n\nTo select a column in a table in R, you cannot click it as in excel, but you can call it by its name or position in the table. \n\nAll the commands below select the column \"weight\" in the data frame \"myPlantGrowth\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use this to return a table with a single column\nmyPlantGrowth = head(PlantGrowth)\nmyPlantGrowth[1] # same with the column name: myPlantGrowth[\"weight\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  weight\n1   4.17\n2   5.58\n3   5.18\n4   6.11\n5   4.50\n6   4.61\n```\n:::\n\n```{.r .cell-code}\n# Use this to return just the values of the column (this structure is called a vector)\nmyPlantGrowth$weight\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.17 5.58 5.18 6.11 4.50 4.61\n```\n:::\n\n```{.r .cell-code}\nmyPlantGrowth[, \"weight\"] # same with the column number: myPlantGrowth[, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.17 5.58 5.18 6.11 4.50 4.61\n```\n:::\n:::\n\n\n\n:::{.callout-tip collapse=\"true\"}\nAlways remember the position of your commas!\n\nUse the function `names` to check or set the names of your columns\n:::\n\n\n## See how much you've learned! - Make your first graph(s)\n\nLet's use the dataset `iris` that is inside R:\n\nRun `str(iris)` to see what the table looks like\n\t\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n:::\n:::\n\n\n\n## Happy ending - your first graph(s)\n\nSelect one numerical column and make a boxplot, example - Sepal.Length\n\n:::{.callout-tip collapse=\"true\"}\n`~` makes R separate the first item in relation to the categories in the second\n:::\n\n:::{.panel-tabset collapse=\"true\"}\n## Basic boxplot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(iris$Sepal.Length ~ iris$Species)\n```\n\n::: {.cell-output-display}\n![](basics_files/figure-html/first graph - basic boxplot-1.png){width=672}\n:::\n:::\n\n\n\n## With colors\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Lets give it some color\ncolors = c(\"red\", \"green\", \"blue\")\nboxplot(iris$Sepal.Length ~ iris$Species, \n\tcol = colors)\n```\n\n::: {.cell-output-display}\n![](basics_files/figure-html/first graph - colored boxplot-1.png){width=672}\n:::\n:::\n\n\n\n\n## With clean axes titles\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolors = c(\"red\", \"green\", \"blue\")\n# If the column names are fine, we can use the function with to remove the table name from the title\nwith(iris, boxplot(Sepal.Length ~ Species, col = colors))\n```\n\n::: {.cell-output-display}\n![](basics_files/figure-html/first graph - cleanTitles boxplot-1.png){width=672}\n:::\n:::\n\n\n\n## With new axes titles\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set a new axes titles with x/ylab\ncolors = c(\"red\", \"green\", \"blue\")\nboxplot(iris$Sepal.Length ~ iris$Species, col = colors, \n\tylab = \"Sepal length (mm)\", xlab = \"Species epithet\")\n```\n\n::: {.cell-output-display}\n![](basics_files/figure-html/first graph - colored-formatted boxplot-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## Homework \n\n:::{.nonincremental}\nUsing `iris`\n\n- Select 2 columns and plot them with `plot`, example: `plot(column1, column2)`\n- Plot everything against everything: `pairs(iris)`\n\nUsing your data\n\n- Create a boxplot with colored boxes, meaningful axes titles and a _plot title_\n:::\n\n## Learning more - Basic R plots \n\n:::{.nonincremental}\n\n- [HBC training](https://hbctraining.github.io/Intro-to-R/lessons/basic_plots_in_r.html)\n- [R Base Graphics: An Idiot's Guide](https://rstudio-pubs-static.s3.amazonaws.com/7953_4e3efd5b9415444ca065b1167862c349.html)\n- [Statistical tools for high-throughput data analysis](http://www.sthda.com/english/wiki/r-base-graphs)\n- [TC Technology Knowledge Base](https://teacherscollege.screenstepslive.com/a/1130011-plot-data-in-r-studio)\n\n:::\n\n## Cheat-sheet for loading files\n\nBasics:\n\n- Normally, R assumes your data has column names\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ncheat_sheet = data.frame(\n\tFunction = c('Function', 'read.csv', 'read.csv2', 'read.delim', 'read.delim2'),\n\tfile_extenion = c('File extenion', '.csv', '.csv', '.txt, .tsv', '.txt, .tsv'),\n\tColumn_separation = c('Column separation', '\",\"', '\";\"', '\"\\\\t\" (tab)', '\"\\\\t\" (tab)'),\n\tDecimal_separation = c('Decimal separation', '\".\"', '\",\"', '\".\"', '\",\"')\n)\ncaption = \"Function names and their assumptions in base r (loaded without the need of any package).\"\ncolNames = cheat_sheet[1, ]\n\ncheat_sheet$Column_separation[2:nrow(cheat_sheet)] = \n\tpaste0(\"sep = \", cheat_sheet$Column_separation[2:nrow(cheat_sheet)])\ncheat_sheet$Decimal_separation[2:nrow(cheat_sheet)] = \n\tpaste0(\"dec = \", cheat_sheet$Decimal_separation[2:nrow(cheat_sheet)])\n\ncheat_sheet[-1,] %>%\n\tkableExtra::kable(\n\t\tformat = \"html\", \n\t\tcol.names = colNames, row.names = F) %>% \n\tkableExtra::kable_classic(lightable_options = \"hover\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic lightable-hover\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Function </th>\n   <th style=\"text-align:left;\"> File extenion </th>\n   <th style=\"text-align:left;\"> Column separation </th>\n   <th style=\"text-align:left;\"> Decimal separation </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> read.csv </td>\n   <td style=\"text-align:left;\"> .csv </td>\n   <td style=\"text-align:left;\"> sep = \",\" </td>\n   <td style=\"text-align:left;\"> dec = \".\" </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> read.csv2 </td>\n   <td style=\"text-align:left;\"> .csv </td>\n   <td style=\"text-align:left;\"> sep = \";\" </td>\n   <td style=\"text-align:left;\"> dec = \",\" </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> read.delim </td>\n   <td style=\"text-align:left;\"> .txt, .tsv </td>\n   <td style=\"text-align:left;\"> sep = \"\\t\" (tab) </td>\n   <td style=\"text-align:left;\"> dec = \".\" </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> read.delim2 </td>\n   <td style=\"text-align:left;\"> .txt, .tsv </td>\n   <td style=\"text-align:left;\"> sep = \"\\t\" (tab) </td>\n   <td style=\"text-align:left;\"> dec = \",\" </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\nIf the column separation or the decimal separation is not the one expected by the function you choose, you can specify the correct one inside the function with:\n\n- `sep = ' '`\n- `dec = '.'`\n\n## Code from class (Friday's group)\n\nCopy and paste one of codes below to repeat what was done in class.\n\n1. [Copy the code from this link](exampleData/script_class1f.R)\n\n\n2. Or run the code below\n\n```{.r}\nsource(\"https://karengoncalves.github.io/Programming_classes/r/exampleData/script_class1f.R\")\n```\n\n\n## Code from class (Tuesday's group)\n\n\n1. [Copy the code from this link](/scripts_for_class/script_class1t.R)\n\n\n2. Or run the code below\n\n```{.r}\nsource(\"https://karengoncalves.github.io/Programming_classes/r/exampleData/script_class1t.R\")\n```\n\n",
    "supporting": [
      "basics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
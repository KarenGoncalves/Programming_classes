{"title":"R class - packages and functions","markdown":{"yaml":{"title":"R class - packages and functions","description":"2nd R class","fontsize":"1.50em","linkcolor":"grey","callout-appearance":"simple","categories":["R basics"],"resources":["/exampleData/TimeSeries_example.csv","/scripts_for_class/script_class2t.R","/scripts_for_class/class_19092023.R","/scripts_for_class/script_class2tuesday.R","/scripts_for_class/class_10102023.R","/scripts_for_class/class_17102023.R","/scripts_for_class/script_class1f.R","/scripts_for_class/class_29092023.R","/scripts_for_class/class_06102023.R","/scripts_for_class/class_19102023.R"],"format":{"revealjs":{"transition":"none","theme":"dark","scrollable":true}},"author":"Karen Cristine Goncalves, Ph.D.","date":"September 2023","incremental":false,"echo":true,"message":false,"warning":false,"slide-number":true},"headingText":"Be lazy!","containsRefs":false,"markdown":"\n\n```{r, include=F}\noptions(repos=\"https://cran.rstudio.com/\")\nlibrary(tidyverse)\n```\n\n\n\nThe most certain way to make mistakes when programming is typing everything.\n\nThink of when you are writing a text, how many typos do you make? This will happen when you are coding!\n\nRealizing there are typos or bigger mistakes in your code is more difficult than in a text to a friend. \n\nSo, be lazy and copy/paste codes when possible. \n\n. . .\n\nAlso, don't try to re-invent the wheel. Check on [stack-overflow](https://stackoverflow.com/questions/tagged/r), [bioconductor](https://support.bioconductor.org/) or [github](github.com) to see if other people already tried what you are doing and the solutions they came up with. You can always edit their code!\n\n## Packages \n\nThese are simply folders containing files with many functions.\n\nThey may contain data so you can test the functions.\n\n\n### How to use packages\n\n:::{.panel-tabset}\n\n# Install\n\nIf you never used the package, it probably is not installed in your computer, so you need to use the function \"install.packages\"\n\n```{.r}\ninstall.packages(\"vegan\") # a package with functions for multivariate stats functions\n\n# You can install many packages at once\ninstall.packages(c(\"venn\", \"tidyverse\"))\n```\n\n\n# Load\n\n`install.packages` just installs the package, but it does not load it (open in R). To load, use the function library\n\n```{.r}\nlibrary(cluster)\nlibrary(\"tidyverse\") # you do not need the quotes with the function library\n```\n\n:::{.callout-caution}\nYou cannot put multiple package names in the library function\nYou need to load them one by one\n:::\n\n# Advanced install and load\n\nCome back to this part once you are more comfortable with programming.\n\nYou cannot put a vector (ie. `c(\"a\", \"b\", \"c\")`) inside `library()`, but you can write a code that loads the packages one by one without you writing that manually.\n\n```{.r}\n# start by creating a vector with all the packages you need\npkgs = c(\"rmarkdown\", \"tidyverse\", \"venn\")\n\n# We check which packages are NOT (!) installed\npkgs.To.Install = ! pkgs %in% installed.packages()\n\n# any() checks if there is at least one TRUE in the vector\nif (any(pkgs.To.Install)) install.packages(pkgs[pkgs.To.Install])\n\nfor (curPkg in pkgs) library(curPkg, character.only = T) \n# curPkg is a variable that takes the value of each element in pkgs\n# Every time the function library() is run, curPkg changes value\n```\n\n\n:::\n\n## loops\n\nLet's create a function and a vector of elements that we will use in the function\n\n```{r}\nthesisDefense = function(x) {return(paste(\"Ph.D.\", x))}\ncandidates = c(\"Serge\", \"Fadoua\", \"Arghavan\", \n\t       \"Snehi\", \"Basanta\", \"Sajjad\", \n\t       \"Mahsa\", \"Archana\")\n```\n\n:::{.fragment fragment-index=1}\n\n- `for` \n\t- Function that will repeat what you ask for everything in the group you give it. <br>Eg: every PhD candidate has to defend their theses: \t- Useful when you do not want to save the results or when you need to save separated objects for each elements in the loop (each candidate below)\n\n```{r}\nfor (phd in candidates) { thesisDefense(phd) }\n```\n\n:::\n\n:::{.fragment fragment-index=2}\n\n```{r}\n# To see an output, we would have to either print it or create an object to save it\ndefenseResults = c()\nfor (phd in candidates) { defenseResults[phd] = thesisDefense(phd) }\ndefenseResults\n```\n\n:::\n\n:::{.fragment fragment-index=3}\n\n- `apply` functions\n\t- Similar to `for`, but generates an output\n\t- Useful when you want a single output for each element of the loop\n\t- Several options: `apply`, `sapply`, `lapply`, `mapply`, `vapply`\n\t\n```{r}\n#| output-location: fragment\n\ndefenseResults = sapply(candidates, \\(phd) thesisDefense(phd) )\n\ndefenseResults\n```\n:::\n\t\n## Tidyverse - many packages that make your life easier \n\nWhen you load the package \"tidyverse\", it tells you that it loaded many others (packages from the uni*verse* **tidy**)\n\n1. Tables and data.frames\n\t- dplyr: many functions to work with tables\n\t- tibble: construct data frames (tables)\n\t- tidyr: tools to better organize data (make it `tidy`ier)\n\t- readr: fast and friendly functions to read table data\n2. Text-like data\n\t- forcats: (anagram of `factors`) tools to work with factors ([tutorial](https://cran.r-project.org/web/packages/forcats/vignettes/forcats.html))\n\t- stringr: work with text (character variables)\n\t- lubridate: work with dates\n\n3. Plots\n\t- ggplot2: create better plots\n4. Programming\n\t- purrr: functional programming in R ([cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/purrr.pdf))\n\n## Pipe (`|>` or `%>%`)\n\nThink of the pipe as a tube connecting two functions. When the first function is done, instead of presenting its output, you use it to start a new function.\n\n- Eg. To start a postdoc, I had to finish my Ph.D:  `phd(\"Karen\") %>% postdoc`\n\n:::{.callout-note}\nIf you use `|>`, you need to put the parenthesis in the function in front of it. Meaning:\n\n- `phd(\"Karen\") %>% postdoc` works same as `phd(\"Karen\") %>% postdoc()` and `phd(\"Karen\") |> postdoc()`\n- `phd(\"Karen\") |> postdoc` does not work\n:::\n\nLet's say you just want to check if R will read your file right or if you need to add more things to it before really working on the file.\n\n:::{.panel-tabset}\n\n# Exercise\n\nRun the function `str` on your input file or on the <a style=\"color: red\" href=\"exampleData/Class1_exampleData.txt\">example from Class 0</a>\n\n\n:::{.callout-tip}\nYou can load files from the internet without needing to download them to your computer!\n:::\n\n# Solution 1\n\n```{r}\n# You could first put the path to the file in a variable, it would make things easier\nmyFile = \"https://karengoncalves.github.io/Programming_classes/exampleData/Class1_exampleData.txt\"\n\nstr(read.delim(myFile))\n\n```\n\n\n# Solution 2\n\nUsing pipe, you can see the progression of the pipeline, eg.: <br>`bachelor(\"Karen\") %>% phd() %>% postdoc` <br>instead of <br>`postdoc(phd(bachelor(\"Karen\")))`\n\nBasically, the first function written is the first one used, not the last.\n\n```{.r}\n# You can also use a pipe ( %>% )\nmyFile = \"https://karengoncalves.github.io/Programming_classes/exampleData/Class1_exampleData.txt\"\n\nread.delim(myFile) %>% str\n```\n\n:::\n\n\n## `readxl` package - open excel files\n\nPart of the `tidyverse` package\n\nAllows you to:\n\n- Check the names of the sheets of an excel file: `excel_sheets(MY_EXCEL_FILE)`\n- Read sheets of an excel file as tibbles (a type of data.frame): \n\t- `read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET)`\n\t- You can specify what defines NA: `read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET, na = \".\")`\n\t- Instead of `header = T`, you use `col_names = T`\n\t- You can specify the number of rows to skip in the beginning with `skip = N`\n\t- You can specify the number of rows to read with `n_max = N`\n\t- You can specify which cols and rows to read with `range = \"H40:T80\"`\n\t\t- If `range` is specified, `skip` and `n_max` are ignored\n\t\t- You can include the name of the sheet: `range = \"MY_SHEET!H40:T80\"`\n\t\t\t- <span style=\"color: red\">SHEET</span><span style=\"color: blue\"> EXCLAMATION_POINT </span><span style=\"color: cyan\">CELL_RANGE\n\t\t\t\n## ggplot2\n\n\n:::{.panel-tabset}\n\n# Exercise\n\nCreate a colored boxplot with the dataset iris, with nice axes titles\n\n# Solution 1\n\nCode from the previous class\n```{r first graph - colored-formatted boxplot}\ncolors = c(\"red\", \"green\", \"blue\")\nboxplot(Sepal.Length ~ Species, \n\tdata = iris, col = colors, \n\tylab = \"Sepal length (mm)\", xlab = \"Species epithet\")\n```\n\n# Solution 2\n\nUse ggplot. The syntax may take a while to get used to, but it is easier to read.\n\n```{r}\n# aes is short for aesthetics, basically what columns hold the values you want to plot\n# fill is the color that will be inside the box, color is just for the border\nggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)) +\n\tgeom_boxplot() + # the type of plot you want\n\tylab(\"Sepal length (mm)\") +\n\txlab(\"Species epithet\")\n```\n\n# Solution 3\n\nImprove ggplot by setting a better theme [(check here see the options)](https://ggplot2.tidyverse.org/reference/ggtheme.html)\n\n```{r}\n# Set a theme for all future plots in this session\ntheme_set(theme_bw()) \n\n# Use different colors to fill and remove the legend\ncolors = c(\"red\", \"green\", \"blue\")\n\nggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)) +\n\tgeom_boxplot(show.legend = F) + # the type of plot you want\n\tylab(\"Sepal length (mm)\") +\n\txlab(\"Species epithet\") +\n\tscale_fill_manual(values = colors)\n```\n\n:::\n\n## ggplot - part 2\n\nGraphics are layers of data and images put on top of each other. That is why the pieces of the ggplot function are connected by a **`+`**.\n\nThe codes below construct the plot from the previous slide piece by piece.\n\n:::{.panel-tabset}\n\n# Basic plot\n\n```{r}\n# Set a theme for all future plots in this session\ntheme_set(theme_bw()) \n\n# Use different colors to fill and remove the legend\n(plot1 = ggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)))\n```\n\n\n```{r}\n(plot2 = plot1 +\n\tgeom_boxplot(show.legend = F)) # the type of plot you want\n```\n\n# Decorations\n\n`labs` adds labels:\n\n- `x` and `y` -  will add the labels to the axes (you can use the functions `xlab` or `ylab` instead)\n- `title` - Normally at the top of the figure (you can use the function `ggtitle` instead)\n- `subtitle` - Goes under the title and is a bit smaller\n- `caption` - Normally goes at the bottom of the figure and is a small text\n- `tag` - the letter that goes at the top-left corner of a plot that is one part of several in a figure\n\n```{r}\n(plot3 = plot2 +\n\tlabs(y = \"Sepal length (mm)\", x = \"Species epithet\"))\n\nplot3\n```\n\n```{r}\ncolors = c(\"red\", \"green\", \"blue\")\n\nplot3 + scale_fill_manual(values = colors)\n```\n\n:::\n\n## dplyr: prepare your data for ggplot\n\nIn the example dataset, the names of the groups are in the middle not specified, they are inside the replicate name. We need one column with the values and one with the names of the treatments.\n\n:::{.panel-tabset}\n\n# Input data\n```{r}\nmyFile = \"https://karengoncalves.github.io/Programming_classes/exampleData/Class1_exampleData.txt\"\n```\n\n```{r}\nrawData = read.delim(myFile)\nnames(rawData)\n\n# Let's change x to \"Measured\"\nnames(rawData)[1] = \"Measured\"\n```\n\n# Pivot-longer\n\nThe table now is in the format \"wide\", the one we want is called \"long\"\n\n```{r}\n\nlongData = pivot_longer(\n\tdata = rawData,\n\tcols = !Measured, # gets all the columns of the table, except for the one in front of !\n\tnames_to = \"Replicates\", # name of the column that will contain column names from rawData\n\tvalues_to = \"Measurements\"\n\t)\n\nstr(longData)\n```\n\n# New column\n\nLet's split the values from \"Replicates\" using `str_split` from `stringr`\n\n`mutate` will return the input table with the new column we create\n\n```{r}\n# pattern is what separates (_)\n# i is the part that we want to see: Control_1 has 2 pieces, i=1 returns \"Control\"\n\nlongDataTreatments = longData %>%\n\tmutate(Treatment = str_split_i(Replicates, pattern = \"_\", i = 1))\n\nstr(longDataTreatments)\n```\n\n# Plot\n\n```{r}\nlongDataTreatments %>%\n\tggplot(aes(x = Treatment, y = Measurements, fill = Measured)) +\n\tgeom_boxplot()\n\nlongDataTreatments %>%\n\tggplot(aes(x = Measured, y = Measurements, fill = Treatment)) +\n\tgeom_boxplot()\n```\n\n:::\n\n## Types of plots - sample distribution\n\n1. Boxplot - [check this slide](#ggplot2)\n\t- ```geom_boxplot```\n\t- Allows the visual comparison of groups, like a bar chart, as well as the distribution of the replicates \n\t\t- You can see the minimum, maximum and the median of the sample, as well as the outliers\n1. Violin plot \n\t- ```geom_violin```\n\t- Same as boxplot, but without the quantiles drawn\n\t\n:::{.callout-tip}\nYou can put different types of plot and multiple data in the same graphic.\n\nOver the violin or boxplot layer, you can add the points representing the value measured for each replicate, the mean, etc.\n:::\n\n:::{.callout-tip}\nIf you have few replicates (< 5), use a barplot with the standard deviation (make sure the color of the bar allows the visualization of the error bar)\n\nIf many replicates per group, use a boxplot or violin plot. \n:::\n\n## Example violin plot {.incremental}\n\nThe code to get a violin plot is the same as the one for a boxplot, the only difference is the *geom_violin*.\n\n```{r}\n# Set a theme for all future plots in this session\ntheme_set(theme_bw()) \n\n# Use different colors to fill and remove the legend\ncolors = c(\"red\", \"green\", \"blue\")\n\nggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)) +\n\tgeom_violin(show.legend = F) + # violin instead of boxplot\n\tylab(\"Sepal length (mm)\") +\n\txlab(\"Species epithet\") +\n\tscale_fill_manual(values = colors)\n```\n\n## Types of plots - Bar chart\n\n:::{.panel-tabset}\n\n# What and how\n\n- Uses\n\t- Visually compare means when the number of replicates is low\n\t- Visually compare counts (number of occurences) - number of students per lab\n- How\n\t- Use either `geom_col` or `geom_bar(stat = \"identity\")`\n\t- Add standard deviation bar with *geom_errorbar*\n\t\t-  ```geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2)```\n\t\n\n# `geom_col`\n\n\n```{r}\ndf <- data.frame(\n  group = c(\"Male\", \"Female\", \"Child\"),\n  value = c(25, 25, 50)\n  )\n\n# Barplot like geom_col\nggplot(df, aes(x = group, y = value, fill = group)) +\n\tgeom_col(width = 1)\n```\n\n# `geom_bar(stat = \"identity\")`\n\n- **identity** means that the size of the bar will be the value you put instead of calculating something\n\n```{r}\ndf <- data.frame(\n  group = c(\"Male\", \"Female\", \"Child\"),\n  value = c(25, 25, 50)\n  )\n\n# Barplot like geom_col\nggplot(df, aes(x = group, y = value, fill = group)) +\n\tgeom_bar(width = 1,  stat = \"identity\")\n```\n\n# Pie chart\n\n- Using either geom_bar or geom_col, you can make a pie chart with `+ coord_polar(\"y\")`\n\n```{r}\ndf <- data.frame(\n  group = c(\"Male\", \"Female\", \"Child\"),\n  value = c(25, 25, 50)\n  )\n\n# Barplot like geom_col\nggplot(df, aes(x = \"\", y = value, fill = group)) +\n\t# x has to be \"\" - check how it looks if you put x = group\n\tgeom_bar(width = 1,  stat = \"identity\") +\n\tcoord_polar(\"y\", start = 1) +\n\ttheme_void() # clean up grids, borders, and labels\n```\n\n:::\n\n## Types of plot - proportions\n\n\nYou can use `geom_bar(stat = \"count\")` if you do not have the number of occurrences of each category computed. This way, ggplot counts it and plots.\n\t- Eg. A table with metabolites detected separated by category: how many metabolites of each category were detected?\n\nIf you want proportions in %, use `stat = \"density\"` instead of `stat = \"count\"`\n\n\n:::{.panel-tabset}\n\n# `geom_bar - count`\n\n- With *geom_bar*, you can have the same plot as with *geom_col* if you use `stat = \"identity\"`\t\n- **identity** means that the size of the bar will be the value you put instead of calculating something\n\n```{r}\n# Datasets about US states\nUS_statesInfo = data.frame(Name = state.name,\n\t\t\t   Region = state.region,\n\t\t\t   Division = state.division)\nx = \"Number of states\"\n# Plot the number of states in each division\nggplot(US_statesInfo, aes(y = Division)) +\n\tgeom_bar(stat = \"count\") +\n\txlab(x)\n\n# Plot the number of states in each region\nggplot(US_statesInfo, aes(y = Region)) +\n\tgeom_bar() +\n\txlab(x)\n\n# Plot the number of states in each division, and color by the region\nggplot(US_statesInfo, aes(y = Division, fill = Region)) +\n\tgeom_bar(stat = \"count\") +\n\txlab(x)\n\n```\n\n:::\n\n## Types of plots - part 3\n\n\nLine graph - ```geom_line```\n\n- Visualize data **across time** - points are connected because they are the same sample at different times. \n\nLet's say we want to see how the labs of 2 PIs have grown across the years and compare the two.\n\n```{r}\n# Let's create a time series to plot\n\nLabSize = data.frame(Isabel = c(0, 3, 5, 10, 30),\n\t\t     Hugo = c(2, 2, 6, 9, 9),\n\t\t     Year = seq(2014, 2022, 2))\nLabSize.Long = pivot_longer(LabSize,\n\t\t\t    cols = !Year, # all columns from LabSize, except \"Year\"\n\t\t\t    names_to = \"PI\", \n\t\t\t    values_to = \"LabMembers\")\n\nggplot(LabSize.Long, \n       aes(x = Year, y = LabMembers, color = PI)) +\n\tgeom_line()\n```\n\n## Advanced line graph\n\n\n:::{.panel-tabset}\n\n# Input\n\nWe will use the [time series data](../../exampleData/TimeSeries_example.csv)\n\n```{r}\n# Load the data\ntimeSeries.File = \"https://karengoncalves.github.io/Programming_classes/exampleData/TimeSeries_example.csv\"\ntimeSeries = read.csv(timeSeries.File)\n```\n\n```{r}\nstr(timeSeries)\n# Let's rename the first column that indicate the time points\nnames(timeSeries)[1] = \"TimePoint\" \ntimeSeries$TimePoint = \n\tgsub(\"Day_\", \"\", timeSeries$TimePoint) |>\n\tas.numeric()\n\n```\n\n# Prepare the data\n\nLet's transform the data to format long and add a column with the name of the treatment group\n\n```{r}\nlibrary(tidyverse)\n\ntimeSeriesLong = pivot_longer(\n\ttimeSeries,\n\tcols = !TimePoint, \n\tnames_to = c(\"Treatment\", \"Replicates\"),\n\tnames_sep = \"_\",\n\tvalues_to = \"Growth_measure\"\n)\n\nhead(timeSeriesLong)\t\n```\n\n# Line chart\n\n```{r}\nggplot(timeSeriesLong) +\n\tgeom_line(aes(x = TimePoint, y = Growth_measure, \n\t\t      group = Treatment, \n\t\t      color = Treatment)) +\n\tscale_x_continuous(breaks = 1:12)\n```\n\n# Calculate stats\n\nNow let's create another table with the mean, standard deviation and coefficient of variation of each treatment per time point\n\n```{r}\n\nGrowthMeasureStats = timeSeriesLong %>%\n\tgroup_by(Treatment, TimePoint) %>%\n\tsummarise(\n\t\tMean = mean(Growth_measure),\n\t\tStdEnv = sd(Growth_measure)\n\t)\n```\n\n# Line chart with error bars\n\nFor the error bars, we cannot simply say \"here, this is the standard deviation\".\n\nWe need to tell it \"use this value as maximum and this as minimum\"\n\nSee that we set \"ymin\" and \"ymax\". If you have standard deviation for the x-axis, you can add it with \"xmin\" and \"xmax\".\n```{r}\n# We put inside ggplot() what is common to all layers\np1 = ggplot(GrowthMeasureStats, \n       aes(x = TimePoint, \n           color = Treatment)) +\n\tgeom_line(aes(y = Mean)) \np1 \n\np1 + geom_errorbar(aes(ymin = Mean - StdEnv,\n\t\t       ymax = Mean + StdEnv),\n\t\t   width = 0.2) +\n\tscale_x_continuous(breaks = 1:12)\n```\n:::\n\n## Test if the curves are different\n\n:::{.panel-tabset}\n\n# Linear model (regression)\n\n```{r}\n# Create the linear model of Growth_measure ~ TimePoint, adding the Treatment interaction\nlinear.model = lm(Growth_measure ~ TimePoint*Treatment, data = timeSeriesLong)\nsummary(linear.model)\n\n```\n\n# Check which curves are different\n\n```{r}\ninstall.packages(\"lsmeans\"); library(\"lsmeans\")\n```\n\n```{r}\nlinear.model.trends <- lstrends(linear.model, \"Treatment\", var=\"TimePoint\")\nsummary(linear.model.trends)\npairs(linear.model.trends)\n```\n:::\n\n\n\n## References\n\n- [All tidyverse packages](https://tidyverse.tidyverse.org/index.html)\n- Tutorials on all types of plots with ggplot2\n\t- [r-statistics](http://r-statistics.co/ggplot2-Tutorial-With-R.html)\n\t- [Cedric Scherer - advanced](https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/)\n- Tutorials on data manipulation with dplyr\n\t- [Tidyverse](https://dplyr.tidyverse.org/)\n\t- [R official](https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html)\n\t- [Genomics class](https://genomicsclass.github.io/book/pages/dplyr_tutorial.html)\n\n## Code from class\n\nTuesdays group\n\n1. [September 19th](/scripts_for_class/script_class2t.R)\n2. [September 19th (2)](/scripts_for_class/class_19092023.R)\n2. [October 3rd](/scripts_for_class/script_class2tuesday.R)\n3. [October 10th](/scripts_for_class/class_10102023.R)\n3. [October 17th](/scripts_for_class/class_17102023.R)\n\nFridays group\n\n1. [September 15th](/scripts_for_class/script_class1f.R)\n2. [September 29th](/scripts_for_class/class_29092023.R)\n3. [October 6th](/scripts_for_class/class_06102023.R)\n4. [October 19th](/scripts_for_class/class_19102023.R)\n","srcMarkdownNoYaml":"\n\n```{r, include=F}\noptions(repos=\"https://cran.rstudio.com/\")\nlibrary(tidyverse)\n```\n\n\n## Be lazy!\n\nThe most certain way to make mistakes when programming is typing everything.\n\nThink of when you are writing a text, how many typos do you make? This will happen when you are coding!\n\nRealizing there are typos or bigger mistakes in your code is more difficult than in a text to a friend. \n\nSo, be lazy and copy/paste codes when possible. \n\n. . .\n\nAlso, don't try to re-invent the wheel. Check on [stack-overflow](https://stackoverflow.com/questions/tagged/r), [bioconductor](https://support.bioconductor.org/) or [github](github.com) to see if other people already tried what you are doing and the solutions they came up with. You can always edit their code!\n\n## Packages \n\nThese are simply folders containing files with many functions.\n\nThey may contain data so you can test the functions.\n\n\n### How to use packages\n\n:::{.panel-tabset}\n\n# Install\n\nIf you never used the package, it probably is not installed in your computer, so you need to use the function \"install.packages\"\n\n```{.r}\ninstall.packages(\"vegan\") # a package with functions for multivariate stats functions\n\n# You can install many packages at once\ninstall.packages(c(\"venn\", \"tidyverse\"))\n```\n\n\n# Load\n\n`install.packages` just installs the package, but it does not load it (open in R). To load, use the function library\n\n```{.r}\nlibrary(cluster)\nlibrary(\"tidyverse\") # you do not need the quotes with the function library\n```\n\n:::{.callout-caution}\nYou cannot put multiple package names in the library function\nYou need to load them one by one\n:::\n\n# Advanced install and load\n\nCome back to this part once you are more comfortable with programming.\n\nYou cannot put a vector (ie. `c(\"a\", \"b\", \"c\")`) inside `library()`, but you can write a code that loads the packages one by one without you writing that manually.\n\n```{.r}\n# start by creating a vector with all the packages you need\npkgs = c(\"rmarkdown\", \"tidyverse\", \"venn\")\n\n# We check which packages are NOT (!) installed\npkgs.To.Install = ! pkgs %in% installed.packages()\n\n# any() checks if there is at least one TRUE in the vector\nif (any(pkgs.To.Install)) install.packages(pkgs[pkgs.To.Install])\n\nfor (curPkg in pkgs) library(curPkg, character.only = T) \n# curPkg is a variable that takes the value of each element in pkgs\n# Every time the function library() is run, curPkg changes value\n```\n\n\n:::\n\n## loops\n\nLet's create a function and a vector of elements that we will use in the function\n\n```{r}\nthesisDefense = function(x) {return(paste(\"Ph.D.\", x))}\ncandidates = c(\"Serge\", \"Fadoua\", \"Arghavan\", \n\t       \"Snehi\", \"Basanta\", \"Sajjad\", \n\t       \"Mahsa\", \"Archana\")\n```\n\n:::{.fragment fragment-index=1}\n\n- `for` \n\t- Function that will repeat what you ask for everything in the group you give it. <br>Eg: every PhD candidate has to defend their theses: \t- Useful when you do not want to save the results or when you need to save separated objects for each elements in the loop (each candidate below)\n\n```{r}\nfor (phd in candidates) { thesisDefense(phd) }\n```\n\n:::\n\n:::{.fragment fragment-index=2}\n\n```{r}\n# To see an output, we would have to either print it or create an object to save it\ndefenseResults = c()\nfor (phd in candidates) { defenseResults[phd] = thesisDefense(phd) }\ndefenseResults\n```\n\n:::\n\n:::{.fragment fragment-index=3}\n\n- `apply` functions\n\t- Similar to `for`, but generates an output\n\t- Useful when you want a single output for each element of the loop\n\t- Several options: `apply`, `sapply`, `lapply`, `mapply`, `vapply`\n\t\n```{r}\n#| output-location: fragment\n\ndefenseResults = sapply(candidates, \\(phd) thesisDefense(phd) )\n\ndefenseResults\n```\n:::\n\t\n## Tidyverse - many packages that make your life easier \n\nWhen you load the package \"tidyverse\", it tells you that it loaded many others (packages from the uni*verse* **tidy**)\n\n1. Tables and data.frames\n\t- dplyr: many functions to work with tables\n\t- tibble: construct data frames (tables)\n\t- tidyr: tools to better organize data (make it `tidy`ier)\n\t- readr: fast and friendly functions to read table data\n2. Text-like data\n\t- forcats: (anagram of `factors`) tools to work with factors ([tutorial](https://cran.r-project.org/web/packages/forcats/vignettes/forcats.html))\n\t- stringr: work with text (character variables)\n\t- lubridate: work with dates\n\n3. Plots\n\t- ggplot2: create better plots\n4. Programming\n\t- purrr: functional programming in R ([cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/purrr.pdf))\n\n## Pipe (`|>` or `%>%`)\n\nThink of the pipe as a tube connecting two functions. When the first function is done, instead of presenting its output, you use it to start a new function.\n\n- Eg. To start a postdoc, I had to finish my Ph.D:  `phd(\"Karen\") %>% postdoc`\n\n:::{.callout-note}\nIf you use `|>`, you need to put the parenthesis in the function in front of it. Meaning:\n\n- `phd(\"Karen\") %>% postdoc` works same as `phd(\"Karen\") %>% postdoc()` and `phd(\"Karen\") |> postdoc()`\n- `phd(\"Karen\") |> postdoc` does not work\n:::\n\nLet's say you just want to check if R will read your file right or if you need to add more things to it before really working on the file.\n\n:::{.panel-tabset}\n\n# Exercise\n\nRun the function `str` on your input file or on the <a style=\"color: red\" href=\"exampleData/Class1_exampleData.txt\">example from Class 0</a>\n\n\n:::{.callout-tip}\nYou can load files from the internet without needing to download them to your computer!\n:::\n\n# Solution 1\n\n```{r}\n# You could first put the path to the file in a variable, it would make things easier\nmyFile = \"https://karengoncalves.github.io/Programming_classes/exampleData/Class1_exampleData.txt\"\n\nstr(read.delim(myFile))\n\n```\n\n\n# Solution 2\n\nUsing pipe, you can see the progression of the pipeline, eg.: <br>`bachelor(\"Karen\") %>% phd() %>% postdoc` <br>instead of <br>`postdoc(phd(bachelor(\"Karen\")))`\n\nBasically, the first function written is the first one used, not the last.\n\n```{.r}\n# You can also use a pipe ( %>% )\nmyFile = \"https://karengoncalves.github.io/Programming_classes/exampleData/Class1_exampleData.txt\"\n\nread.delim(myFile) %>% str\n```\n\n:::\n\n\n## `readxl` package - open excel files\n\nPart of the `tidyverse` package\n\nAllows you to:\n\n- Check the names of the sheets of an excel file: `excel_sheets(MY_EXCEL_FILE)`\n- Read sheets of an excel file as tibbles (a type of data.frame): \n\t- `read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET)`\n\t- You can specify what defines NA: `read_excel(file = MY_EXCEL_FILE, sheet = MY_SHEET, na = \".\")`\n\t- Instead of `header = T`, you use `col_names = T`\n\t- You can specify the number of rows to skip in the beginning with `skip = N`\n\t- You can specify the number of rows to read with `n_max = N`\n\t- You can specify which cols and rows to read with `range = \"H40:T80\"`\n\t\t- If `range` is specified, `skip` and `n_max` are ignored\n\t\t- You can include the name of the sheet: `range = \"MY_SHEET!H40:T80\"`\n\t\t\t- <span style=\"color: red\">SHEET</span><span style=\"color: blue\"> EXCLAMATION_POINT </span><span style=\"color: cyan\">CELL_RANGE\n\t\t\t\n## ggplot2\n\n\n:::{.panel-tabset}\n\n# Exercise\n\nCreate a colored boxplot with the dataset iris, with nice axes titles\n\n# Solution 1\n\nCode from the previous class\n```{r first graph - colored-formatted boxplot}\ncolors = c(\"red\", \"green\", \"blue\")\nboxplot(Sepal.Length ~ Species, \n\tdata = iris, col = colors, \n\tylab = \"Sepal length (mm)\", xlab = \"Species epithet\")\n```\n\n# Solution 2\n\nUse ggplot. The syntax may take a while to get used to, but it is easier to read.\n\n```{r}\n# aes is short for aesthetics, basically what columns hold the values you want to plot\n# fill is the color that will be inside the box, color is just for the border\nggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)) +\n\tgeom_boxplot() + # the type of plot you want\n\tylab(\"Sepal length (mm)\") +\n\txlab(\"Species epithet\")\n```\n\n# Solution 3\n\nImprove ggplot by setting a better theme [(check here see the options)](https://ggplot2.tidyverse.org/reference/ggtheme.html)\n\n```{r}\n# Set a theme for all future plots in this session\ntheme_set(theme_bw()) \n\n# Use different colors to fill and remove the legend\ncolors = c(\"red\", \"green\", \"blue\")\n\nggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)) +\n\tgeom_boxplot(show.legend = F) + # the type of plot you want\n\tylab(\"Sepal length (mm)\") +\n\txlab(\"Species epithet\") +\n\tscale_fill_manual(values = colors)\n```\n\n:::\n\n## ggplot - part 2\n\nGraphics are layers of data and images put on top of each other. That is why the pieces of the ggplot function are connected by a **`+`**.\n\nThe codes below construct the plot from the previous slide piece by piece.\n\n:::{.panel-tabset}\n\n# Basic plot\n\n```{r}\n# Set a theme for all future plots in this session\ntheme_set(theme_bw()) \n\n# Use different colors to fill and remove the legend\n(plot1 = ggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)))\n```\n\n\n```{r}\n(plot2 = plot1 +\n\tgeom_boxplot(show.legend = F)) # the type of plot you want\n```\n\n# Decorations\n\n`labs` adds labels:\n\n- `x` and `y` -  will add the labels to the axes (you can use the functions `xlab` or `ylab` instead)\n- `title` - Normally at the top of the figure (you can use the function `ggtitle` instead)\n- `subtitle` - Goes under the title and is a bit smaller\n- `caption` - Normally goes at the bottom of the figure and is a small text\n- `tag` - the letter that goes at the top-left corner of a plot that is one part of several in a figure\n\n```{r}\n(plot3 = plot2 +\n\tlabs(y = \"Sepal length (mm)\", x = \"Species epithet\"))\n\nplot3\n```\n\n```{r}\ncolors = c(\"red\", \"green\", \"blue\")\n\nplot3 + scale_fill_manual(values = colors)\n```\n\n:::\n\n## dplyr: prepare your data for ggplot\n\nIn the example dataset, the names of the groups are in the middle not specified, they are inside the replicate name. We need one column with the values and one with the names of the treatments.\n\n:::{.panel-tabset}\n\n# Input data\n```{r}\nmyFile = \"https://karengoncalves.github.io/Programming_classes/exampleData/Class1_exampleData.txt\"\n```\n\n```{r}\nrawData = read.delim(myFile)\nnames(rawData)\n\n# Let's change x to \"Measured\"\nnames(rawData)[1] = \"Measured\"\n```\n\n# Pivot-longer\n\nThe table now is in the format \"wide\", the one we want is called \"long\"\n\n```{r}\n\nlongData = pivot_longer(\n\tdata = rawData,\n\tcols = !Measured, # gets all the columns of the table, except for the one in front of !\n\tnames_to = \"Replicates\", # name of the column that will contain column names from rawData\n\tvalues_to = \"Measurements\"\n\t)\n\nstr(longData)\n```\n\n# New column\n\nLet's split the values from \"Replicates\" using `str_split` from `stringr`\n\n`mutate` will return the input table with the new column we create\n\n```{r}\n# pattern is what separates (_)\n# i is the part that we want to see: Control_1 has 2 pieces, i=1 returns \"Control\"\n\nlongDataTreatments = longData %>%\n\tmutate(Treatment = str_split_i(Replicates, pattern = \"_\", i = 1))\n\nstr(longDataTreatments)\n```\n\n# Plot\n\n```{r}\nlongDataTreatments %>%\n\tggplot(aes(x = Treatment, y = Measurements, fill = Measured)) +\n\tgeom_boxplot()\n\nlongDataTreatments %>%\n\tggplot(aes(x = Measured, y = Measurements, fill = Treatment)) +\n\tgeom_boxplot()\n```\n\n:::\n\n## Types of plots - sample distribution\n\n1. Boxplot - [check this slide](#ggplot2)\n\t- ```geom_boxplot```\n\t- Allows the visual comparison of groups, like a bar chart, as well as the distribution of the replicates \n\t\t- You can see the minimum, maximum and the median of the sample, as well as the outliers\n1. Violin plot \n\t- ```geom_violin```\n\t- Same as boxplot, but without the quantiles drawn\n\t\n:::{.callout-tip}\nYou can put different types of plot and multiple data in the same graphic.\n\nOver the violin or boxplot layer, you can add the points representing the value measured for each replicate, the mean, etc.\n:::\n\n:::{.callout-tip}\nIf you have few replicates (< 5), use a barplot with the standard deviation (make sure the color of the bar allows the visualization of the error bar)\n\nIf many replicates per group, use a boxplot or violin plot. \n:::\n\n## Example violin plot {.incremental}\n\nThe code to get a violin plot is the same as the one for a boxplot, the only difference is the *geom_violin*.\n\n```{r}\n# Set a theme for all future plots in this session\ntheme_set(theme_bw()) \n\n# Use different colors to fill and remove the legend\ncolors = c(\"red\", \"green\", \"blue\")\n\nggplot(data = iris,\n       aes(x = Species,\n           y = Sepal.Length,\n           fill = Species)) +\n\tgeom_violin(show.legend = F) + # violin instead of boxplot\n\tylab(\"Sepal length (mm)\") +\n\txlab(\"Species epithet\") +\n\tscale_fill_manual(values = colors)\n```\n\n## Types of plots - Bar chart\n\n:::{.panel-tabset}\n\n# What and how\n\n- Uses\n\t- Visually compare means when the number of replicates is low\n\t- Visually compare counts (number of occurences) - number of students per lab\n- How\n\t- Use either `geom_col` or `geom_bar(stat = \"identity\")`\n\t- Add standard deviation bar with *geom_errorbar*\n\t\t-  ```geom_errorbar(aes(ymin=Mean-sd, ymax=Mean+sd), width=.2)```\n\t\n\n# `geom_col`\n\n\n```{r}\ndf <- data.frame(\n  group = c(\"Male\", \"Female\", \"Child\"),\n  value = c(25, 25, 50)\n  )\n\n# Barplot like geom_col\nggplot(df, aes(x = group, y = value, fill = group)) +\n\tgeom_col(width = 1)\n```\n\n# `geom_bar(stat = \"identity\")`\n\n- **identity** means that the size of the bar will be the value you put instead of calculating something\n\n```{r}\ndf <- data.frame(\n  group = c(\"Male\", \"Female\", \"Child\"),\n  value = c(25, 25, 50)\n  )\n\n# Barplot like geom_col\nggplot(df, aes(x = group, y = value, fill = group)) +\n\tgeom_bar(width = 1,  stat = \"identity\")\n```\n\n# Pie chart\n\n- Using either geom_bar or geom_col, you can make a pie chart with `+ coord_polar(\"y\")`\n\n```{r}\ndf <- data.frame(\n  group = c(\"Male\", \"Female\", \"Child\"),\n  value = c(25, 25, 50)\n  )\n\n# Barplot like geom_col\nggplot(df, aes(x = \"\", y = value, fill = group)) +\n\t# x has to be \"\" - check how it looks if you put x = group\n\tgeom_bar(width = 1,  stat = \"identity\") +\n\tcoord_polar(\"y\", start = 1) +\n\ttheme_void() # clean up grids, borders, and labels\n```\n\n:::\n\n## Types of plot - proportions\n\n\nYou can use `geom_bar(stat = \"count\")` if you do not have the number of occurrences of each category computed. This way, ggplot counts it and plots.\n\t- Eg. A table with metabolites detected separated by category: how many metabolites of each category were detected?\n\nIf you want proportions in %, use `stat = \"density\"` instead of `stat = \"count\"`\n\n\n:::{.panel-tabset}\n\n# `geom_bar - count`\n\n- With *geom_bar*, you can have the same plot as with *geom_col* if you use `stat = \"identity\"`\t\n- **identity** means that the size of the bar will be the value you put instead of calculating something\n\n```{r}\n# Datasets about US states\nUS_statesInfo = data.frame(Name = state.name,\n\t\t\t   Region = state.region,\n\t\t\t   Division = state.division)\nx = \"Number of states\"\n# Plot the number of states in each division\nggplot(US_statesInfo, aes(y = Division)) +\n\tgeom_bar(stat = \"count\") +\n\txlab(x)\n\n# Plot the number of states in each region\nggplot(US_statesInfo, aes(y = Region)) +\n\tgeom_bar() +\n\txlab(x)\n\n# Plot the number of states in each division, and color by the region\nggplot(US_statesInfo, aes(y = Division, fill = Region)) +\n\tgeom_bar(stat = \"count\") +\n\txlab(x)\n\n```\n\n:::\n\n## Types of plots - part 3\n\n\nLine graph - ```geom_line```\n\n- Visualize data **across time** - points are connected because they are the same sample at different times. \n\nLet's say we want to see how the labs of 2 PIs have grown across the years and compare the two.\n\n```{r}\n# Let's create a time series to plot\n\nLabSize = data.frame(Isabel = c(0, 3, 5, 10, 30),\n\t\t     Hugo = c(2, 2, 6, 9, 9),\n\t\t     Year = seq(2014, 2022, 2))\nLabSize.Long = pivot_longer(LabSize,\n\t\t\t    cols = !Year, # all columns from LabSize, except \"Year\"\n\t\t\t    names_to = \"PI\", \n\t\t\t    values_to = \"LabMembers\")\n\nggplot(LabSize.Long, \n       aes(x = Year, y = LabMembers, color = PI)) +\n\tgeom_line()\n```\n\n## Advanced line graph\n\n\n:::{.panel-tabset}\n\n# Input\n\nWe will use the [time series data](../../exampleData/TimeSeries_example.csv)\n\n```{r}\n# Load the data\ntimeSeries.File = \"https://karengoncalves.github.io/Programming_classes/exampleData/TimeSeries_example.csv\"\ntimeSeries = read.csv(timeSeries.File)\n```\n\n```{r}\nstr(timeSeries)\n# Let's rename the first column that indicate the time points\nnames(timeSeries)[1] = \"TimePoint\" \ntimeSeries$TimePoint = \n\tgsub(\"Day_\", \"\", timeSeries$TimePoint) |>\n\tas.numeric()\n\n```\n\n# Prepare the data\n\nLet's transform the data to format long and add a column with the name of the treatment group\n\n```{r}\nlibrary(tidyverse)\n\ntimeSeriesLong = pivot_longer(\n\ttimeSeries,\n\tcols = !TimePoint, \n\tnames_to = c(\"Treatment\", \"Replicates\"),\n\tnames_sep = \"_\",\n\tvalues_to = \"Growth_measure\"\n)\n\nhead(timeSeriesLong)\t\n```\n\n# Line chart\n\n```{r}\nggplot(timeSeriesLong) +\n\tgeom_line(aes(x = TimePoint, y = Growth_measure, \n\t\t      group = Treatment, \n\t\t      color = Treatment)) +\n\tscale_x_continuous(breaks = 1:12)\n```\n\n# Calculate stats\n\nNow let's create another table with the mean, standard deviation and coefficient of variation of each treatment per time point\n\n```{r}\n\nGrowthMeasureStats = timeSeriesLong %>%\n\tgroup_by(Treatment, TimePoint) %>%\n\tsummarise(\n\t\tMean = mean(Growth_measure),\n\t\tStdEnv = sd(Growth_measure)\n\t)\n```\n\n# Line chart with error bars\n\nFor the error bars, we cannot simply say \"here, this is the standard deviation\".\n\nWe need to tell it \"use this value as maximum and this as minimum\"\n\nSee that we set \"ymin\" and \"ymax\". If you have standard deviation for the x-axis, you can add it with \"xmin\" and \"xmax\".\n```{r}\n# We put inside ggplot() what is common to all layers\np1 = ggplot(GrowthMeasureStats, \n       aes(x = TimePoint, \n           color = Treatment)) +\n\tgeom_line(aes(y = Mean)) \np1 \n\np1 + geom_errorbar(aes(ymin = Mean - StdEnv,\n\t\t       ymax = Mean + StdEnv),\n\t\t   width = 0.2) +\n\tscale_x_continuous(breaks = 1:12)\n```\n:::\n\n## Test if the curves are different\n\n:::{.panel-tabset}\n\n# Linear model (regression)\n\n```{r}\n# Create the linear model of Growth_measure ~ TimePoint, adding the Treatment interaction\nlinear.model = lm(Growth_measure ~ TimePoint*Treatment, data = timeSeriesLong)\nsummary(linear.model)\n\n```\n\n# Check which curves are different\n\n```{r}\ninstall.packages(\"lsmeans\"); library(\"lsmeans\")\n```\n\n```{r}\nlinear.model.trends <- lstrends(linear.model, \"Treatment\", var=\"TimePoint\")\nsummary(linear.model.trends)\npairs(linear.model.trends)\n```\n:::\n\n\n\n## References\n\n- [All tidyverse packages](https://tidyverse.tidyverse.org/index.html)\n- Tutorials on all types of plots with ggplot2\n\t- [r-statistics](http://r-statistics.co/ggplot2-Tutorial-With-R.html)\n\t- [Cedric Scherer - advanced](https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/)\n- Tutorials on data manipulation with dplyr\n\t- [Tidyverse](https://dplyr.tidyverse.org/)\n\t- [R official](https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html)\n\t- [Genomics class](https://genomicsclass.github.io/book/pages/dplyr_tutorial.html)\n\n## Code from class\n\nTuesdays group\n\n1. [September 19th](/scripts_for_class/script_class2t.R)\n2. [September 19th (2)](/scripts_for_class/class_19092023.R)\n2. [October 3rd](/scripts_for_class/script_class2tuesday.R)\n3. [October 10th](/scripts_for_class/class_10102023.R)\n3. [October 17th](/scripts_for_class/class_17102023.R)\n\nFridays group\n\n1. [September 15th](/scripts_for_class/script_class1f.R)\n2. [September 29th](/scripts_for_class/class_29092023.R)\n3. [October 6th](/scripts_for_class/class_06102023.R)\n4. [October 19th](/scripts_for_class/class_19102023.R)\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","incremental":false,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.3.450","auto-stretch":true,"title-block-banner":true,"title":"R class - packages and functions","description":"2nd R class","fontsize":"1.50em","linkcolor":"grey","callout-appearance":"simple","categories":["R basics"],"resources":["/exampleData/TimeSeries_example.csv","/scripts_for_class/script_class2t.R","/scripts_for_class/class_19092023.R","/scripts_for_class/script_class2tuesday.R","/scripts_for_class/class_10102023.R","/scripts_for_class/class_17102023.R","/scripts_for_class/script_class1f.R","/scripts_for_class/class_29092023.R","/scripts_for_class/class_06102023.R","/scripts_for_class/class_19102023.R"],"author":"Karen Cristine Goncalves, Ph.D.","date":"September 2023","message":false,"slideNumber":true,"transition":"none","theme":"dark","scrollable":true}}},"projectFormats":["html"]}
{"title":"Get read counts","markdown":{"yaml":{"title":"Get read counts","author":"Karen Cristine Goncalves, Ph.D.","description":"4th R class - transcriptomics sessions","fontsize":"1.25em","linkcolor":"grey","callout-appearance":"simple","categories":["R advanced","Read alignment","Omics","Transcriptomics"],"format":{"revealjs":{"transition":"none","theme":"dark","scrollable":true}},"date":"16 February 2024","incremental":false,"echo":true,"warning":false,"eval":true,"draft":false},"headingText":"Data processing before R","containsRefs":false,"markdown":"\n\n\nShort read sequencing transcriptomic data (in the form of fastq files, sometimes compressed as fastq.gz) pass through the some steps before we can proceed to analysis shown in this class. \n\nThe pre-processing is typically done in servers (unix/bash language) and includes:\n\n1. Quality assessment and filtering\n2. IN THE ABSENCE OF A REFERENCE: Transcriptome assembly\n3. Read alignment/mapping\n4. Sorting and indexing\n\n<p style=\"color: red\">**The things shown in this class are for alignments onto reference genomes.**</p>\n\n## Things to know \n\n- Keep track how many reads passed the quality filtering and how many were mapped.\n\n- In the case of a new assembly, you can follow steps on [TrinityRNASeq wiki](https://github.com/trinityrnaseq/trinityrnaseq/wiki/Trinity-Transcript-Quantification) for transcript quantification.\n\n- Is it possible to do all the processing in R? YES\n    - Is it worth it? ...\n    \n      >- What you will do in R is use it to connect to another program that will do the job. So you end up using more memory (computer gets slower, takes a lot of time).\n      >- Some programs are not available for windows, so you may install all the packages necessary just to learn that you cannot use them.\n\n  \n## Data processing before R - detail\n\n1. Quality assessment and filtering:\n    - [fastp](https://github.com/OpenGene/fastp) (last update: 2023); [fastqc](https://www.bioinformatics.babraham.ac.uk/projects/fastqc/) (last update: 2023) followed by [trimmomatic](https://github.com/usadellab/Trimmomatic) (last update: 2021)\n2. Creation of a reference transcriptome: \n    - [trinity](https://github.com/trinityrnaseq/trinityrnaseq) (last update: 2023); [SOAPdenovo-Trans](https://github.com/aquaskyline/SOAPdenovo-Trans) (last update: 2022); [Trans-ABySS](https://www.bcgsc.ca/resources/software/trans-abyss) (last update: 2018); [Oases](https://github.com/dzerbino/oases) (last update: 2015); [Velvet](https://github.com/dzerbino/velvet) (last update: 2014)\n3. Read alignment/mapping:\n    - Alignment - finds the exact origin of the reads and their differences compared to the reference (like blasting each read against a genome or transcriptome). It is slow - each alignment may take hours depending on the amount of data and size of the reference. These export SAM or BAM files, requiring indexing (step 4):\n        - [bowtie2](https://bowtie-bio.sourceforge.net/bowtie2/manual.shtml) (last update: 2024); [STAR](https://github.com/alexdobin/STAR) (last update: 2023); [HISAT2](https://daehwankimlab.github.io/hisat2/) (last update: 2020); [bwa](https://bio-bwa.sourceforge.net/) (last update: 2017); [TOPHAT2](https://ccb.jhu.edu/software/tophat/index.shtml) (last update: 2016)\n    - Pseudoalignment/Mapping - hyper fast - each alignment takes minutes. They only give the genomic/transcriptomic origin of each read. These export the read count tables directly:\n        - [Salmon](https://salmon.readthedocs.io/en/latest/) (last update: 2023); [Kallisto](https://pachterlab.github.io/kallisto/about) (last update: 2019)\n4. If the aligner provides the result as SAM or not sorted by genomic coordinates, use `samtools view` to sort and export into sorted BAM. Then use `samtools index` to get the `bai` files.\n    - In the end, you should have 2 files per sample/replicate: `sampleX_repY_Aligned.sortedByCoord.out.bam` and `sampleX_repY_Aligned.sortedByCoord.out.bam.bai`\n\n:::{.callout-info}\n\nNote that if you only want to perform differential expression analysis, GO term enrichment, etc, you do not need to perform read alignment, just mapping suffices.\n\n:::\n\n## Data processing before R - code example\n  \nThe code below executes the 2 commands of the program STAR: the creation of the index of the genome and the alignment.\n\nThe texts within `${}` are variable that should be created before hand. This `${r1/_R1.fastq}` means \"remove _R1.fastq\" from `${r1}` (like a `gsub`)\n\n```{.bash}\n# Note that the adapter sequences depend on the type of sequencer\nfastp -i ${raw_R1} -I ${raw_R2}\\\n -o ${r1} -O ${r2}\\\n --qualified_quality_phred 20\\\n --unqualified_percent_limit 30\\\n --adapter_sequence=TCGTCGGCAGCGTCAGATGTGTATAAGAGACAG\\\n --adapter_sequence_r2=GTCTCGTGGGCTCGGAGATGTGTATAAGAGACAG\\\n --cut_front --cut_front_window_size 3\\\n --cut_right --cut_right_window_size 4\\\n --cut_right_mean_quality 15\\\n --length_required 25\\\n --html $DIR/fastpReports/${r1/_R1.fastq}.html\\\n --thread 8 \n\n# Let's decide if we want to map or align\nMODE=\"align\"\n\nif [[ $MODE == \"align\" ]]; then\n  STAR\\\n   --runThreadN ${NCPUS}\\\n   --runMode genomeGenerate\\\n   --genomeDir ${genomeIdxDIR}\\\n   --genomeFastaFiles ${genomeFastaFiles}\\\n   --sjdbGTFfile ${genomeGTFFile}\\\n   --sjdbOverhang ${readLength}\n   \n  STAR --genomeDir ${indexDIR}/\\\n   --runThreadN ${NCPUS} \\\n   --readFilesIn ${DIR}/clean_reads/${r1} ${DIR}/clean_reads/${r2} \\\n   --outFileNamePrefix ${DIR}/alignments/${r1/_R1.fastq}_\\\n   --outSAMtype BAM SortedByCoordinate \\\n   --outSAMunmapped Within\n\nelse\n  kallisto index -i ${genomeIdxDIR} ${genomeFastaFiles}\n  kallisto quant -i ${genomeIdxDIR}\\\n   -o ${DIR}/alignments/${r1/_R1.fastq}\\\n    ${DIR}/clean_reads/${r1}\\\n    ${DIR}/clean_reads/${r2}\nfi\n\n```\n\n## Installing the packages\n\nIf you use the a reference genome for which the annotation is available in Ensembl, you can create your transcript (or 5'/3'-UTR) database while you are waiting for the alignment of your reads.\n\nFor this, we need the packages \"GenomicFeatures\", \"GenomicAlignments\", \"biomaRt\", \"tidyverse\".\n\n```{r, results='hide'}\nbioconductor_pkgs = c(\"GenomicFeatures\", \"GenomicAlignments\", \"biomaRt\", \"Rsamtools\")\ncran_pkgs = \"tidyverse\"\n\ndevtools::source_gist(\"https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978\")\n\ninstall_from_dif_sources(\n    cran_packages = cran_pkgs,\n    bioconductor_packages = bioconductor_pkgs\n)\n```\n\n\n## Setting up the scene\n\nThere are several biomarts (databases) stored in different Ensembl pages.\n\n:::{.panel-tabset}\n# biomarts\n\n:::{.callout-not}\nThere is a bacteria Ensembl, but there is not a biomart for it\n:::\n\n- [Animals](https://ensembl.org)\n  - host: `\"https://ensembl.org\"`\n  - mart: `\"ENSEMBL_MART_ENSEMBL\"` (currently on version 111)\n- [Plants](https://plants.ensembl.org)\n  - host: `\"https://plants.ensembl.org\"`\n  - mart: `\"plants_mart\"`  (currently on version 58)\n- [Fungi](https://fungi.ensembl.org)\n  - host: `\"https://fungi.ensembl.org\"`\n  - mart: `\"fungi_mart\"`  (currently on version 58)\n- [Protists](https://protists.ensembl.org)\n  - host: `\"https://protists.ensembl.org\"`\n  - mart: `\"protists_mart\"` (currently on version 58)\n\nThere are other biomarts in the each Ensembl. You can check their names and versions with\n\n```{r}\nhost = \"https://plants.ensembl.org\"\nlistMarts(host = host)\n```\n\n# Selecting a biomart dataset\n\nNext thing you need is the name of the dataset. \n\nYou can check the ones available by running:\n\n```{r, results='hide'}\nmart = useMart(host = host, biomart = \"plants_mart\")\nlistDatasets(mart) # this is a table, so we can filter it\n```\n\n\n```{r}\n# If I am working with Arabidopsis thaliana, I can search for it with filter\nlistDatasets(mart) %>%\n  filter(grepl(\"Arabidopsis thaliana\", description))\n\n# Now I know I have to use the dataset \"athaliana_eg_gene\"\n```\n\n# Creating the transcript database\n\nNow we have all the data we need, we set our variables: \n\n```{.r}\n# Edit the following based on what you need\nbiomart = \"plants_mart\"\ndataset = \"athaliana_eg_gene\"\nprefix = \"ensembl_\"\nhost = \"https://plants.ensembl.org\"\n\n# The result will be saved as a .RData object, so we do not recalculate this every time.\ndir = \"./\" # current directory\noutputPath = paste0(dir, \"Arabidopsis_TxDb.RData\")\n```\n\nThen we create a Transcript DataBase (txdb) from Biomart:\n\n```{.r}\n# Following takes a while (a few minutes), so it is better to calculate this once than export the result\nTxDb <- makeTxDbFromBiomart(biomart = biomart,\n                            dataset = dataset,\n                            id_prefix = prefix,\n                            host = host)\n\n# TxDb is a weird type of data, difficult to access, so we get the information on the transcripts with the function transcriptsBy\ntx <- transcriptsBy(TxDb,\"gene\")\n\n# Then we save the two databases into the Rdata object.\nsave(TxDb, tx, file = outputPath)\n\n```\n\n# Whole script\n\nIf you want to use the script we worked on here, just copy it below and change the section \"VARIABLES\" to fit your needs\n\n```{.r}\n###########################################\n################ VARIABLES ################\n###########################################\nspecies = \"Athaliana\"\nbiomart = \"plants_mart\"\ndataset = \"athaliana_eg_gene\"\nprefix = \"ensembl_\"\nhost = \"https://plants.ensembl.org\"\ndir = \"./output_tables/\" \noutputPath = paste0(dir, species, \"_TxDb.RData\")\n\n###########################################\n################ Packages #################\n###########################################\n\nbioconductor_pkgs = c(\"GenomicFeatures\", \"GenomicAlignments\", \"biomaRt\")\n\ndevtools::source_gist(\"https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978\")\n\ninstall_from_dif_sources(\n    bioconductor_packages = bioconductor_pkgs\n)\n\n###########################################\n############# Create databse ##############\n###########################################\n\nTxDb <- makeTxDbFromBiomart(biomart = biomart,\n                            dataset = dataset,\n                            id_prefix = prefix,\n                            host = host)\ntx <- transcriptsBy(TxDb,\"gene\")\n\nsave(TxDb, tx, file = outputPath)\n```\n\n:::\n\n## Getting the input files\n\nNow that we have the `.bam`, `.bam.bai` and the transcript database RData, count the number of reads aligned to each gene.\n\nFor the example here, we will use these files (reads from _Arabidopsis thaliana_ Col-0 GFP plants):\n\n```{.r}\n\nsapply(c(\"output_tables/counts\", \"output_tables/alignments\"),\n       dir.create)\nsite = \"https://karengoncalves.github.io/Programming_classes/exampleData/\"\nsapply(c(\"subset_Col_0_GFP_1_Aligned.sortedByCoord.out.bam\",\n          \"subset_Col_0_GFP_1_Aligned.sortedByCoord.out.bam.bai\"),\n       \\(x) download.file(\n         url = paste0(site, x), \n         destfile = paste0(\"output_tables/alignments\", x))\n)    \n\n```\n\n\n## Get the counts - prepare the variables\n\nNow that we have the files, we need to inform R where they are stored and where to put the results, in other words, prepare the variables.\n\n:::{.callout-note}\n\n- The basename here is the name of the sample_rep, without the suffix added by the aligner or samtools nor folder names (these are removed with the function `basename`)\n- For the example, we will use a single sample, but we will use a loop so the final script can be used fo multiple samples easily\n\n:::\n\n```{.r}\nbamFiles <- paste0(\"/output_tables/alignments/\", \n                   list.files(path = \"/output_tables/alignments/\")\n)\n  \nbaiFiles <- paste0(bamFiles, \".bai\")\nbaseNames <- gsub(\"_Aligned.sortedByCoord.out.bam\", \"\",\n                  basename(bamFiles))\nTxDbPath <- \"./output_tables/Arabidopsis_TxDb.RData\"\nload(TxDbPath)\noutPutDir <- \"./output_tables/\"\n\n# Now we load the RData\n# This line tells R where the alignment files for the sample are and how much of them to read at a time\nbfl <- BamFileList(bamFiles, \n                   baiFiles, \n                   yieldSize=200000)\n```\n\n\n```{r, echo = FALSE, include=FALSE, results='hide'}\ninDir = \"../../exampleData/\"\nbamFiles <- paste0(inDir, \n                   list.files(path = inDir,\n                              pattern = \".bam$\")\n)\n  \nbaiFiles <- paste0(bamFiles, \".bai\")\nbaseNames <- gsub(\"_Aligned.sortedByCoord.out.bam\", \"\",\n                  basename(bamFiles))\nTxDbPath <- paste0(inDir, \"Arabidopsis_TxDb.RData\")\noutPutDir <- inDir\nload(TxDbPath)\n# Now we load the RData\n# This line tells R where the alignment files for the sample are and how much of them to read at a time\nbfl <- BamFileList(bamFiles, \n                   baiFiles, \n                   yieldSize=200000)\n```\n\n## Get the counts - overlaps\n\nSummarize overlaps\n\n:::{.panel-tabset}\n\n# Code \n\nThe code below uses `summarizedOverlaps` to count the number of alignments (`bfl` object) falling in each transcript (`tx` object, transcript database)\n\n```{r}\noverlaps <- summarizeOverlaps(\n  features = tx, # genes' coordinates\n  reads = bfl, # bam and bai files\n  mode = \"Union\", \n  # mode can be also \"IntersectStrict\" or \"IntersectNotEmpty\"\n  singleEnd = F, fragments = T, \n  ignore.strand = T\n  )\n```\n\n# Explanation\n\nIn this case, we have paired-end reads (singleEnd = F, fragments = T), we ignore the strand information and we use the [union mode](https://htseq.readthedocs.io/en/release_0.11.1/count.html):\n\n![](https://htseq.readthedocs.io/en/release_0.11.1/_images/count_modes.png)\n\n\n:::{.callout-note}\nAll the bam/bai files are analysed here. So if you have many, R will take very long to run the code. You can increase or decrease the `yieldSize` in the function `BamFileList` (previous slide) to use more/less memory and increase/decrease the speed of the code.\n:::\n\n# Saving overlaps result\n\nWe save this result, so if there is an issue with the rest of the code, the heavy part of the program gets saved before R stops.\n\n```{.r}\n# \nsave(overlaps, file = paste0(outPutDir, \"overlaps.RData\"))\n```\n\n:::\n\n## Get counts - export table\n\nNow that we have the overlaps, we can get the counts.\n\n```{r}\n# Then we extract the counts slot, transform into a data.frame and export it as a csv file.\ncountAssays = assays(overlaps)$counts  %>% as.data.frame()\nnames(countAssays) <- baseNames\n\nwrite_csv(x = countAssays, \n          file = paste0(outPutDir, \"counts.csv\"), \n          col_names = T,\n          quote = \"none\")\n```\n\nWe can check the number of reads/fragments that passed the criteria to be considered mapped using `colSums`. By using this function, we get the result for all datasets included in the table, without needing to explicitly type any specific sample name.\n\n```{r}\ncolSums(countAssays)\n```\n\n\n## More tutorials and resources\n\n- ARTICLE: [a survey of best practices for RNA-seq data analysis](https://doi.org/10.1186/s13059-016-0881-8)\n- [Introduction to transcript quantification with Salmon](https://bioinformatics-core-shared-training.github.io/Bulk_RNAseq_Course_Nov23/Bulk_RNAseq_Course_Base/Markdowns/03_Quantification_with_Salmon_introduction.html)\n- [End-to-end analysis - RNAseq](https://www.alzheimersworkbench.ucsd.edu/EndToEndAnalysis_RNASeq.html)\n- [RNAseq analysis in R - University of Cambridge](https://bioinformatics-core-shared-training.github.io/RNAseq-R/)\n- [RNAseq-R](https://sbc.shef.ac.uk/RNAseq-R/)\n\n\n","srcMarkdownNoYaml":"\n\n## Data processing before R\n\nShort read sequencing transcriptomic data (in the form of fastq files, sometimes compressed as fastq.gz) pass through the some steps before we can proceed to analysis shown in this class. \n\nThe pre-processing is typically done in servers (unix/bash language) and includes:\n\n1. Quality assessment and filtering\n2. IN THE ABSENCE OF A REFERENCE: Transcriptome assembly\n3. Read alignment/mapping\n4. Sorting and indexing\n\n<p style=\"color: red\">**The things shown in this class are for alignments onto reference genomes.**</p>\n\n## Things to know \n\n- Keep track how many reads passed the quality filtering and how many were mapped.\n\n- In the case of a new assembly, you can follow steps on [TrinityRNASeq wiki](https://github.com/trinityrnaseq/trinityrnaseq/wiki/Trinity-Transcript-Quantification) for transcript quantification.\n\n- Is it possible to do all the processing in R? YES\n    - Is it worth it? ...\n    \n      >- What you will do in R is use it to connect to another program that will do the job. So you end up using more memory (computer gets slower, takes a lot of time).\n      >- Some programs are not available for windows, so you may install all the packages necessary just to learn that you cannot use them.\n\n  \n## Data processing before R - detail\n\n1. Quality assessment and filtering:\n    - [fastp](https://github.com/OpenGene/fastp) (last update: 2023); [fastqc](https://www.bioinformatics.babraham.ac.uk/projects/fastqc/) (last update: 2023) followed by [trimmomatic](https://github.com/usadellab/Trimmomatic) (last update: 2021)\n2. Creation of a reference transcriptome: \n    - [trinity](https://github.com/trinityrnaseq/trinityrnaseq) (last update: 2023); [SOAPdenovo-Trans](https://github.com/aquaskyline/SOAPdenovo-Trans) (last update: 2022); [Trans-ABySS](https://www.bcgsc.ca/resources/software/trans-abyss) (last update: 2018); [Oases](https://github.com/dzerbino/oases) (last update: 2015); [Velvet](https://github.com/dzerbino/velvet) (last update: 2014)\n3. Read alignment/mapping:\n    - Alignment - finds the exact origin of the reads and their differences compared to the reference (like blasting each read against a genome or transcriptome). It is slow - each alignment may take hours depending on the amount of data and size of the reference. These export SAM or BAM files, requiring indexing (step 4):\n        - [bowtie2](https://bowtie-bio.sourceforge.net/bowtie2/manual.shtml) (last update: 2024); [STAR](https://github.com/alexdobin/STAR) (last update: 2023); [HISAT2](https://daehwankimlab.github.io/hisat2/) (last update: 2020); [bwa](https://bio-bwa.sourceforge.net/) (last update: 2017); [TOPHAT2](https://ccb.jhu.edu/software/tophat/index.shtml) (last update: 2016)\n    - Pseudoalignment/Mapping - hyper fast - each alignment takes minutes. They only give the genomic/transcriptomic origin of each read. These export the read count tables directly:\n        - [Salmon](https://salmon.readthedocs.io/en/latest/) (last update: 2023); [Kallisto](https://pachterlab.github.io/kallisto/about) (last update: 2019)\n4. If the aligner provides the result as SAM or not sorted by genomic coordinates, use `samtools view` to sort and export into sorted BAM. Then use `samtools index` to get the `bai` files.\n    - In the end, you should have 2 files per sample/replicate: `sampleX_repY_Aligned.sortedByCoord.out.bam` and `sampleX_repY_Aligned.sortedByCoord.out.bam.bai`\n\n:::{.callout-info}\n\nNote that if you only want to perform differential expression analysis, GO term enrichment, etc, you do not need to perform read alignment, just mapping suffices.\n\n:::\n\n## Data processing before R - code example\n  \nThe code below executes the 2 commands of the program STAR: the creation of the index of the genome and the alignment.\n\nThe texts within `${}` are variable that should be created before hand. This `${r1/_R1.fastq}` means \"remove _R1.fastq\" from `${r1}` (like a `gsub`)\n\n```{.bash}\n# Note that the adapter sequences depend on the type of sequencer\nfastp -i ${raw_R1} -I ${raw_R2}\\\n -o ${r1} -O ${r2}\\\n --qualified_quality_phred 20\\\n --unqualified_percent_limit 30\\\n --adapter_sequence=TCGTCGGCAGCGTCAGATGTGTATAAGAGACAG\\\n --adapter_sequence_r2=GTCTCGTGGGCTCGGAGATGTGTATAAGAGACAG\\\n --cut_front --cut_front_window_size 3\\\n --cut_right --cut_right_window_size 4\\\n --cut_right_mean_quality 15\\\n --length_required 25\\\n --html $DIR/fastpReports/${r1/_R1.fastq}.html\\\n --thread 8 \n\n# Let's decide if we want to map or align\nMODE=\"align\"\n\nif [[ $MODE == \"align\" ]]; then\n  STAR\\\n   --runThreadN ${NCPUS}\\\n   --runMode genomeGenerate\\\n   --genomeDir ${genomeIdxDIR}\\\n   --genomeFastaFiles ${genomeFastaFiles}\\\n   --sjdbGTFfile ${genomeGTFFile}\\\n   --sjdbOverhang ${readLength}\n   \n  STAR --genomeDir ${indexDIR}/\\\n   --runThreadN ${NCPUS} \\\n   --readFilesIn ${DIR}/clean_reads/${r1} ${DIR}/clean_reads/${r2} \\\n   --outFileNamePrefix ${DIR}/alignments/${r1/_R1.fastq}_\\\n   --outSAMtype BAM SortedByCoordinate \\\n   --outSAMunmapped Within\n\nelse\n  kallisto index -i ${genomeIdxDIR} ${genomeFastaFiles}\n  kallisto quant -i ${genomeIdxDIR}\\\n   -o ${DIR}/alignments/${r1/_R1.fastq}\\\n    ${DIR}/clean_reads/${r1}\\\n    ${DIR}/clean_reads/${r2}\nfi\n\n```\n\n## Installing the packages\n\nIf you use the a reference genome for which the annotation is available in Ensembl, you can create your transcript (or 5'/3'-UTR) database while you are waiting for the alignment of your reads.\n\nFor this, we need the packages \"GenomicFeatures\", \"GenomicAlignments\", \"biomaRt\", \"tidyverse\".\n\n```{r, results='hide'}\nbioconductor_pkgs = c(\"GenomicFeatures\", \"GenomicAlignments\", \"biomaRt\", \"Rsamtools\")\ncran_pkgs = \"tidyverse\"\n\ndevtools::source_gist(\"https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978\")\n\ninstall_from_dif_sources(\n    cran_packages = cran_pkgs,\n    bioconductor_packages = bioconductor_pkgs\n)\n```\n\n\n## Setting up the scene\n\nThere are several biomarts (databases) stored in different Ensembl pages.\n\n:::{.panel-tabset}\n# biomarts\n\n:::{.callout-not}\nThere is a bacteria Ensembl, but there is not a biomart for it\n:::\n\n- [Animals](https://ensembl.org)\n  - host: `\"https://ensembl.org\"`\n  - mart: `\"ENSEMBL_MART_ENSEMBL\"` (currently on version 111)\n- [Plants](https://plants.ensembl.org)\n  - host: `\"https://plants.ensembl.org\"`\n  - mart: `\"plants_mart\"`  (currently on version 58)\n- [Fungi](https://fungi.ensembl.org)\n  - host: `\"https://fungi.ensembl.org\"`\n  - mart: `\"fungi_mart\"`  (currently on version 58)\n- [Protists](https://protists.ensembl.org)\n  - host: `\"https://protists.ensembl.org\"`\n  - mart: `\"protists_mart\"` (currently on version 58)\n\nThere are other biomarts in the each Ensembl. You can check their names and versions with\n\n```{r}\nhost = \"https://plants.ensembl.org\"\nlistMarts(host = host)\n```\n\n# Selecting a biomart dataset\n\nNext thing you need is the name of the dataset. \n\nYou can check the ones available by running:\n\n```{r, results='hide'}\nmart = useMart(host = host, biomart = \"plants_mart\")\nlistDatasets(mart) # this is a table, so we can filter it\n```\n\n\n```{r}\n# If I am working with Arabidopsis thaliana, I can search for it with filter\nlistDatasets(mart) %>%\n  filter(grepl(\"Arabidopsis thaliana\", description))\n\n# Now I know I have to use the dataset \"athaliana_eg_gene\"\n```\n\n# Creating the transcript database\n\nNow we have all the data we need, we set our variables: \n\n```{.r}\n# Edit the following based on what you need\nbiomart = \"plants_mart\"\ndataset = \"athaliana_eg_gene\"\nprefix = \"ensembl_\"\nhost = \"https://plants.ensembl.org\"\n\n# The result will be saved as a .RData object, so we do not recalculate this every time.\ndir = \"./\" # current directory\noutputPath = paste0(dir, \"Arabidopsis_TxDb.RData\")\n```\n\nThen we create a Transcript DataBase (txdb) from Biomart:\n\n```{.r}\n# Following takes a while (a few minutes), so it is better to calculate this once than export the result\nTxDb <- makeTxDbFromBiomart(biomart = biomart,\n                            dataset = dataset,\n                            id_prefix = prefix,\n                            host = host)\n\n# TxDb is a weird type of data, difficult to access, so we get the information on the transcripts with the function transcriptsBy\ntx <- transcriptsBy(TxDb,\"gene\")\n\n# Then we save the two databases into the Rdata object.\nsave(TxDb, tx, file = outputPath)\n\n```\n\n# Whole script\n\nIf you want to use the script we worked on here, just copy it below and change the section \"VARIABLES\" to fit your needs\n\n```{.r}\n###########################################\n################ VARIABLES ################\n###########################################\nspecies = \"Athaliana\"\nbiomart = \"plants_mart\"\ndataset = \"athaliana_eg_gene\"\nprefix = \"ensembl_\"\nhost = \"https://plants.ensembl.org\"\ndir = \"./output_tables/\" \noutputPath = paste0(dir, species, \"_TxDb.RData\")\n\n###########################################\n################ Packages #################\n###########################################\n\nbioconductor_pkgs = c(\"GenomicFeatures\", \"GenomicAlignments\", \"biomaRt\")\n\ndevtools::source_gist(\"https://gist.github.com/KarenGoncalves/0db105bceff4ff69547ee25460dda978\")\n\ninstall_from_dif_sources(\n    bioconductor_packages = bioconductor_pkgs\n)\n\n###########################################\n############# Create databse ##############\n###########################################\n\nTxDb <- makeTxDbFromBiomart(biomart = biomart,\n                            dataset = dataset,\n                            id_prefix = prefix,\n                            host = host)\ntx <- transcriptsBy(TxDb,\"gene\")\n\nsave(TxDb, tx, file = outputPath)\n```\n\n:::\n\n## Getting the input files\n\nNow that we have the `.bam`, `.bam.bai` and the transcript database RData, count the number of reads aligned to each gene.\n\nFor the example here, we will use these files (reads from _Arabidopsis thaliana_ Col-0 GFP plants):\n\n```{.r}\n\nsapply(c(\"output_tables/counts\", \"output_tables/alignments\"),\n       dir.create)\nsite = \"https://karengoncalves.github.io/Programming_classes/exampleData/\"\nsapply(c(\"subset_Col_0_GFP_1_Aligned.sortedByCoord.out.bam\",\n          \"subset_Col_0_GFP_1_Aligned.sortedByCoord.out.bam.bai\"),\n       \\(x) download.file(\n         url = paste0(site, x), \n         destfile = paste0(\"output_tables/alignments\", x))\n)    \n\n```\n\n\n## Get the counts - prepare the variables\n\nNow that we have the files, we need to inform R where they are stored and where to put the results, in other words, prepare the variables.\n\n:::{.callout-note}\n\n- The basename here is the name of the sample_rep, without the suffix added by the aligner or samtools nor folder names (these are removed with the function `basename`)\n- For the example, we will use a single sample, but we will use a loop so the final script can be used fo multiple samples easily\n\n:::\n\n```{.r}\nbamFiles <- paste0(\"/output_tables/alignments/\", \n                   list.files(path = \"/output_tables/alignments/\")\n)\n  \nbaiFiles <- paste0(bamFiles, \".bai\")\nbaseNames <- gsub(\"_Aligned.sortedByCoord.out.bam\", \"\",\n                  basename(bamFiles))\nTxDbPath <- \"./output_tables/Arabidopsis_TxDb.RData\"\nload(TxDbPath)\noutPutDir <- \"./output_tables/\"\n\n# Now we load the RData\n# This line tells R where the alignment files for the sample are and how much of them to read at a time\nbfl <- BamFileList(bamFiles, \n                   baiFiles, \n                   yieldSize=200000)\n```\n\n\n```{r, echo = FALSE, include=FALSE, results='hide'}\ninDir = \"../../exampleData/\"\nbamFiles <- paste0(inDir, \n                   list.files(path = inDir,\n                              pattern = \".bam$\")\n)\n  \nbaiFiles <- paste0(bamFiles, \".bai\")\nbaseNames <- gsub(\"_Aligned.sortedByCoord.out.bam\", \"\",\n                  basename(bamFiles))\nTxDbPath <- paste0(inDir, \"Arabidopsis_TxDb.RData\")\noutPutDir <- inDir\nload(TxDbPath)\n# Now we load the RData\n# This line tells R where the alignment files for the sample are and how much of them to read at a time\nbfl <- BamFileList(bamFiles, \n                   baiFiles, \n                   yieldSize=200000)\n```\n\n## Get the counts - overlaps\n\nSummarize overlaps\n\n:::{.panel-tabset}\n\n# Code \n\nThe code below uses `summarizedOverlaps` to count the number of alignments (`bfl` object) falling in each transcript (`tx` object, transcript database)\n\n```{r}\noverlaps <- summarizeOverlaps(\n  features = tx, # genes' coordinates\n  reads = bfl, # bam and bai files\n  mode = \"Union\", \n  # mode can be also \"IntersectStrict\" or \"IntersectNotEmpty\"\n  singleEnd = F, fragments = T, \n  ignore.strand = T\n  )\n```\n\n# Explanation\n\nIn this case, we have paired-end reads (singleEnd = F, fragments = T), we ignore the strand information and we use the [union mode](https://htseq.readthedocs.io/en/release_0.11.1/count.html):\n\n![](https://htseq.readthedocs.io/en/release_0.11.1/_images/count_modes.png)\n\n\n:::{.callout-note}\nAll the bam/bai files are analysed here. So if you have many, R will take very long to run the code. You can increase or decrease the `yieldSize` in the function `BamFileList` (previous slide) to use more/less memory and increase/decrease the speed of the code.\n:::\n\n# Saving overlaps result\n\nWe save this result, so if there is an issue with the rest of the code, the heavy part of the program gets saved before R stops.\n\n```{.r}\n# \nsave(overlaps, file = paste0(outPutDir, \"overlaps.RData\"))\n```\n\n:::\n\n## Get counts - export table\n\nNow that we have the overlaps, we can get the counts.\n\n```{r}\n# Then we extract the counts slot, transform into a data.frame and export it as a csv file.\ncountAssays = assays(overlaps)$counts  %>% as.data.frame()\nnames(countAssays) <- baseNames\n\nwrite_csv(x = countAssays, \n          file = paste0(outPutDir, \"counts.csv\"), \n          col_names = T,\n          quote = \"none\")\n```\n\nWe can check the number of reads/fragments that passed the criteria to be considered mapped using `colSums`. By using this function, we get the result for all datasets included in the table, without needing to explicitly type any specific sample name.\n\n```{r}\ncolSums(countAssays)\n```\n\n\n## More tutorials and resources\n\n- ARTICLE: [a survey of best practices for RNA-seq data analysis](https://doi.org/10.1186/s13059-016-0881-8)\n- [Introduction to transcript quantification with Salmon](https://bioinformatics-core-shared-training.github.io/Bulk_RNAseq_Course_Nov23/Bulk_RNAseq_Course_Base/Markdowns/03_Quantification_with_Salmon_introduction.html)\n- [End-to-end analysis - RNAseq](https://www.alzheimersworkbench.ucsd.edu/EndToEndAnalysis_RNASeq.html)\n- [RNAseq analysis in R - University of Cambridge](https://bioinformatics-core-shared-training.github.io/RNAseq-R/)\n- [RNAseq-R](https://sbc.shef.ac.uk/RNAseq-R/)\n\n\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","incremental":false,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.3.450","auto-stretch":true,"title-block-banner":true,"title":"Get read counts","author":"Karen Cristine Goncalves, Ph.D.","description":"4th R class - transcriptomics sessions","fontsize":"1.25em","linkcolor":"grey","callout-appearance":"simple","categories":["R advanced","Read alignment","Omics","Transcriptomics"],"date":"16 February 2024","draft":false,"transition":"none","theme":"dark","scrollable":true}}},"projectFormats":["html"]}
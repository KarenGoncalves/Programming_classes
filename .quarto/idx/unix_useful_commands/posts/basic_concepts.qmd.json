{"title":"Basic concepts","markdown":{"yaml":{"title":"Basic concepts","description":"Definitions of absolute and relative paths, session, scritps, quotes, and commands","author":"Karen C. Goncalves dos Santos","callout-appearance":"simple","date":"10 January 2023","categories":["Unix basics","Concepts","Paths","Comments","Variables"],"format":"html"},"headingText":"Concepts","containsRefs":false,"markdown":"\n\n\n- Paths\n  - Absolute path: includes the root (starts with a \"/\")\n  - Relative path: is dependent on your location in the computer. For example, if the file or folder to which you refer is present in the your current folder, you need simply write its name.\n- Session: each time you open a command line window or connect to the server\n- Commands: orders given to the server, ends when you press enter/return. Exceptions:\n  - `\\`: escape character. If you add a new line (press `enter` or `return`) right after a `\\`, it will be read as the same line\n  - Some commands use quotes (either `'` or `\"`), and normally if you start a new line without closing the quote, it will be considered part of the same command\n  - `;` has the same effect as a new line. So you can write multiple commands in the same line by separating them with a `;`\n- Script: a list of commands to be executed by the computer\n- Comments: explanations added to scripts to help understanding it or commands one does not desire to execute, but does not want to lose it either as they may be useful later. \n  - Anything in front of a `#` is a comment: a whole line or part of a line after a command.\n  - Note that if you use `\\` to break a command into multiple lines, you should not use the `#` after the `\\` as it would ignore the `#` and try to execute your comment.\n  - There is a convention for how to use comments:\n  \n:::{.panel-tabset}\n# Spliting script into sections\n\nYou can split your script into sections that do different things. To later know where each part starts and ends, you can insert section titles using three lines of `#`, with the middle one containing title of a section. \n\nYou normally write the section title with a `#`, space, text, space `#`. Then you add as many `#`s in the lines above and below the title as needed so that the three lines are the same length.\n\n```\n#################\n# Section title #\n#################\n```\n\n# Comenting code\n\nTo prevent a code from being executed, add a `#` without a space between the code and the `#`\n\n`#echo file.txt`\n\n# Writing explanation\n\nWhether in the beginning of the line or the middle of it, separate the explanation text from the `#` with a space\n\n```\n# This is a comment to explain that echo just repeats the text in front of it\necho file.txt # echo is the same as \"repeat\"\n```\n:::\n \n\n## Variables\n\n### Definition \n\nA value that can be accessed as `$XXX`, `\"$XXX\"` or `${XXX}`, where `XXX` is any name given to the variable. \n\n### How to create one\n\nBelow, we create the variable `filename` and use the command `echo` to print the value stored in `$filename`. \n\n```\nfilename=/home/c/Users/username/Desktop/file.txt\necho $filename\n# If the file that `$filename` refers to is a text, we can print the beginning of it with \n```\n\n### Why use variables\n\n- You use repeatedly a file in a script, but its name is too long, so you you store the file name into a variable and just use the shorter variable name instead\n- You are using a loop to avoid repeating yourself:\n\n```\necho file.txt\necho file1.txt\necho myFile.txt\n\n# The code below does exactly the same as the 3 echo above\nfor file in file.txt file1.txt myFile.txt; do echo $file; done\n```\n\nThere are other more complex reasons to use variables, related to scripts.\n\n## Clean the screen: `clear`\n\nWill clear you screen, so you will not be able to see the previous commands by looking up or scrolling. You can still use the up and down arrows to look at the commands you have used in the session.\n\n## See commands used previously : `history`\n\nShows the list of commands you have used in the computer with the date and time of use. Does not contain ALL the commands you have ever used, since old lines are deleted. So if you think you may need to see the command again, copy it to a file.\n","srcMarkdownNoYaml":"\n\n## Concepts\n\n- Paths\n  - Absolute path: includes the root (starts with a \"/\")\n  - Relative path: is dependent on your location in the computer. For example, if the file or folder to which you refer is present in the your current folder, you need simply write its name.\n- Session: each time you open a command line window or connect to the server\n- Commands: orders given to the server, ends when you press enter/return. Exceptions:\n  - `\\`: escape character. If you add a new line (press `enter` or `return`) right after a `\\`, it will be read as the same line\n  - Some commands use quotes (either `'` or `\"`), and normally if you start a new line without closing the quote, it will be considered part of the same command\n  - `;` has the same effect as a new line. So you can write multiple commands in the same line by separating them with a `;`\n- Script: a list of commands to be executed by the computer\n- Comments: explanations added to scripts to help understanding it or commands one does not desire to execute, but does not want to lose it either as they may be useful later. \n  - Anything in front of a `#` is a comment: a whole line or part of a line after a command.\n  - Note that if you use `\\` to break a command into multiple lines, you should not use the `#` after the `\\` as it would ignore the `#` and try to execute your comment.\n  - There is a convention for how to use comments:\n  \n:::{.panel-tabset}\n# Spliting script into sections\n\nYou can split your script into sections that do different things. To later know where each part starts and ends, you can insert section titles using three lines of `#`, with the middle one containing title of a section. \n\nYou normally write the section title with a `#`, space, text, space `#`. Then you add as many `#`s in the lines above and below the title as needed so that the three lines are the same length.\n\n```\n#################\n# Section title #\n#################\n```\n\n# Comenting code\n\nTo prevent a code from being executed, add a `#` without a space between the code and the `#`\n\n`#echo file.txt`\n\n# Writing explanation\n\nWhether in the beginning of the line or the middle of it, separate the explanation text from the `#` with a space\n\n```\n# This is a comment to explain that echo just repeats the text in front of it\necho file.txt # echo is the same as \"repeat\"\n```\n:::\n \n\n## Variables\n\n### Definition \n\nA value that can be accessed as `$XXX`, `\"$XXX\"` or `${XXX}`, where `XXX` is any name given to the variable. \n\n### How to create one\n\nBelow, we create the variable `filename` and use the command `echo` to print the value stored in `$filename`. \n\n```\nfilename=/home/c/Users/username/Desktop/file.txt\necho $filename\n# If the file that `$filename` refers to is a text, we can print the beginning of it with \n```\n\n### Why use variables\n\n- You use repeatedly a file in a script, but its name is too long, so you you store the file name into a variable and just use the shorter variable name instead\n- You are using a loop to avoid repeating yourself:\n\n```\necho file.txt\necho file1.txt\necho myFile.txt\n\n# The code below does exactly the same as the 3 echo above\nfor file in file.txt file1.txt myFile.txt; do echo $file; done\n```\n\nThere are other more complex reasons to use variables, related to scripts.\n\n## Clean the screen: `clear`\n\nWill clear you screen, so you will not be able to see the previous commands by looking up or scrolling. You can still use the up and down arrows to look at the commands you have used in the session.\n\n## See commands used previously : `history`\n\nShows the list of commands you have used in the computer with the date and time of use. Does not contain ALL the commands you have ever used, since old lines are deleted. So if you think you may need to see the command again, copy it to a file.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"basic_concepts.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.551","theme":{"light":"flatly","dark":"darkly"},"title":"Basic concepts","description":"Definitions of absolute and relative paths, session, scritps, quotes, and commands","author":"Karen C. Goncalves dos Santos","callout-appearance":"simple","date":"10 January 2023","categories":["Unix basics","Concepts","Paths","Comments","Variables"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}
{"title":"Unix basic commands","markdown":{"yaml":{"title":"Unix basic commands","description":"1st unix class","fontsize":"1.5em","linkcolor":"grey","callout-appearance":"simple","categories":["Unix basics"],"format":{"revealjs":{"transition":"none","theme":"dark","scrollable":true}},"author":"Karen Cristine Goncalves, Ph.D.","date":"2023-01-26"},"headingText":"Basics","containsRefs":false,"markdown":"\n\n<!-- <style> -->\n<!-- .code { -->\n<!-- background-color: grey; -->\n<!-- color: white; -->\n<!-- font-size: 1.5em -->\n<!-- } -->\n\n<!-- li { -->\n<!-- line-height: 2em -->\n<!-- } -->\n<!-- </style> -->\n\n\n - Commands are separated by a new line (Enter, Return) or a semicolon (;)\n - The first word in a command is what you are asking the computer to do (a function)\n - Spaces are used to separate file names, commands, etc. \n - Some commands allow you to customize their output with options\n\t- These are single letters, a word, or several words preceded by `-` or `--`\n - You can get help for a command by using the help option (either `-h` , `--help` ) or the command `man` (for manual)\n\t\n### <b>\n<div class=\"code\">\n\n```\nls --help\nman ls\n```\n</div>\n### </b>\n\n\n## About spaces and file names\n\n Put name in quotes if it has spaces (test code below)\n\n```\ntouch Programming Class.txt\nls\n\ntouch \"Programming Class.txt\"\nls\n```\n\nQuotes are NORMALLY (not always) interchangeable  (test code below)\n\n```\necho \"This is good\"\necho 'This is good'\n```\n\nDo not start with one quote type and end with another\n\n## Shortcuts - part 1\n\n\n - <span class=\"code\">`~` </span>or <span class=\"code\">`$HOME` </span>: your home folder (can be defined by the user)\n - <span class=\"code\">`.`</span> : the folder that you are currently in\n - <span class=\"code\">`..`</span>: the folder that contains the one you are currently in\n - <span class=\"code\">`Ctrl+C`</span>: cancel a command\n - In MobaxTerm, find and modify useful shortcuts by clicking on Settings -> Keyboard shortcuts\n\n## Shortcuts - part 2\n\n - <span class=\"code\">`whoami`</span>\n\t- prints your username (if saved in the computer)\n- Use `tab` to complete words \n- In a current command or in a text file, move the cursor faster by using `Ctrl+Arrow` (right or left arrow in a command line, in a text file up and down arrow too) (this works everywhere!!!)\n\n\n## Basic commands - part 1\n\n\t\t\n - <span class=\"code\">`cd`</span>\n\t- acronym for \"change directory\" (directory = folder)\n\t- If used alone, opens your home folder\n\t- The name of the folder to which you want to go comes after `cd` \n\t\t- `cd` , `cd ~` and `cd $HOME` are synonyms\n\t- `cd -` - takes you to the previous folder\n\n## Basic commands - part 2\n\n - <span class=\"code\">`pwd`</span>\n\t- acronym for \"print working directory\" (directory = folder)\n\t- equivalent to the R function `getwd()` or python's `os.getcwd()`\n\t- prints the full path to your current folder\n\t- A full path always starts from the root (/)\n\n##  Basic commands - part 3\n\n - <span class=\"code\">`ls`</span>\n\t- lists the contents of your current folder\n\t- Check <a href=\"#(4)\">`slide 2`</a> where we used this command\n - Use <span class=\"code\">`>`</span> after a command to save the output\n\t\n```\npwd > myFolder\ncat myFolder\n```\n\n- Use <span class=\"code\">`>>`</span> to add the current output to a previous file\n\t\n```\nls >> myFolder\ncat myFolder\n```\n\n## Managing text files - part 1\n\n- <span class=\"code\">`cat`</span> : prints the contents of the file to the screen (check <a href=\"#(9)\">`slide 9`</a>\n\t- Do not use it with files are that not text (images, pdfs, compressed files) or is too big\n\t- If several files names are put after the command, one file is printed followed by the next (conCATenation)\n- <span class=\"code\">`head`</span> and <span class=\"code\">`tail`</span>: prints to the screen the first/last 10 lines of the file \n\n## Managing text files - part 2\n\n- <span class=\"code\">`less`</span> : opens the file as \"read-only\"\n\t- Search for a word in a file inside less by typing \"/\" followed by the word\n\t- To close less, press Q\n- <span class=\"code\">`more`</span> : opens the file as \"read-only\", when the file is closed, prints it to the screen\n\n\n## Managing text files - part 3\n\n- <span class=\"code\">`nano`</span> : open a text file to edit it.\n- <span class=\"code\">`grep`</span> : searches for a word/phrase in the file and prints the lines that match\n\t- Can search for several phrases (one per line) in a file by using the option `-f`\n\t- If you don't care about the upper/lower case, use the option `-i` or `--ignore-case`\n\n## Managing text files - part 4\n\nSearch for lines that have the word programming in the file myFolder created in <a href=\"#(9)\">`slide 9`</a></span>\n\n```\ngrep \"Programming\" myFolder\n```\n\n- <span class=\"code\">`wc`</span> : word count. Counts the number of characters, words and lines in a file\n- <span class=\"code\">`echo`</span> : repeats the text that follows it (check <a href=\"#(4)\">`slide 4`</a>)\n\n## Exercise\n\n- Save a fasta file into your home folder with the name myFasta.fa\n- Use `grep` to find all the lines with sequence IDs.\n\t- Note - put the word or phrase you will search for inside `\"\"`\n\n## Exercise - Solution\n\n- Save a fasta file into your home folder with the name myFasta.fa\n- Use `grep` to find all the lines with sequence IDs.\n\t- Note - put the word or phrase you will search for inside `\"\"`\n\n### <b>\n<div class=\"code\">\n\\#<span style=\"color: white\"> In all fasta files, the sequence ID line is indicated by the symbol >, so we just need to look for it</span>\n\n`grep \">\" myFasta.fa`\n\n</div>\t\n### </b>\n\n- Normally, if you just search for one word, the quotes are not needed, by in this case, the symbol `\">\"` could also mean \"send the output to\", which would replace the myFasta.fa file\n\n## Managing files - part 1\n\n- <span class=\"code\">`cp`</span> : acronym for copy\n\t- <span class=\"code\">`cp file file2`</span> : creates a copy of the file \"file\" and saves it in the file \"file2\"\n\t- <span class=\"code\">`cp file folder`</span> : creates a copy of the file \"file\" and saves it with the same name in the folder \"folder\"\n\t- <span class=\"code\">`cp file file2 folder`</span>: both files \"file\" and \"file2\" are copied into the folder \"folder\" with the same names\n\t- <span class=\"code\">`cp folder folder2 -r`</span> : the option -r allows the copy of the entire folder.\n\t\t- If folder2 doesn't exist, it will be created to hold the same files as \"folder\"\n\t\t- If folder2 exists, a copy of \"folder\" will be created inside of folder2\n\n## Managing files - part 2\n\n- <span class=\"code\">`mv`</span> : acronym for move. Move file from one place to another\n\t- <span class=\"code\">`mv file file2`</span> : renames \"file\" as \"file2\"\n\t- <span class=\"code\">`mv file folder`</span> : moves \"file\" into the folder \"folder\"\n\t- <span class=\"code\">`mv file file2 folder`</span>: both files \"file\" and \"file2\" are moved into the folder \"folder\" with the same names\n\t- <span class=\"code\">`mv folder folder2`</span> : \n\t\t- If folder2 doesn't exist, it is the same as renaming \"folder\" as \"folder2\"\n\t\t- If folder2 exists, \"folder\" is moved to that folder\n\n## Managing files - part 3\n\n- <span class=\"code\">`rm`</span> : acronym for remove. Deletes files. **They are PERMANENTELY deleted, there is no trash bin here!!!!!!!**\n\t- <span class=\"code\">`rm file file2`</span> : deletes both files\n\t- <span class=\"code\">`rm file file2 -i`</span> : asks the user if they really want to delete each file, if `y` is pressed, the file is deleted (`-i` for interactive)\n\n## Managing folders\n\n- <span class=\"code\">`mkdir`</span> : acronym for \"make directory\". Creates new folders with the specified names. \n\t- Gives an error if something with the same name already exists in the current folder. \n\t- If many names are given (separated by spaces, creates all names folders)\n- <span class=\"code\">`rmdir`</span> : acronym for \"remove directory\". Deletes **_empty_** folders. \n\t- If the folder is not empty, gives an error.\n\t- If many names are given (separated by spaces, deletes all names folders **if they are empty**\n- <span class=\"code\">`rm -r folder`</span> : as in `cp`, the option `-r` allows the `rm` to work with a folder. It deletes everything in the folder, then deletes the folder itself\n\n## Resources for help\n\n[Glossary of commands](https://github.com/KarenGoncalves/Amaryllidaceae_database/wiki/Glossary-of-commands)\n\n[Book on basic unix commands](https://eriqande.github.io/eca-bioinf-handbook/)\n","srcMarkdownNoYaml":"\n\n<!-- <style> -->\n<!-- .code { -->\n<!-- background-color: grey; -->\n<!-- color: white; -->\n<!-- font-size: 1.5em -->\n<!-- } -->\n\n<!-- li { -->\n<!-- line-height: 2em -->\n<!-- } -->\n<!-- </style> -->\n\n## Basics\n\n - Commands are separated by a new line (Enter, Return) or a semicolon (;)\n - The first word in a command is what you are asking the computer to do (a function)\n - Spaces are used to separate file names, commands, etc. \n - Some commands allow you to customize their output with options\n\t- These are single letters, a word, or several words preceded by `-` or `--`\n - You can get help for a command by using the help option (either `-h` , `--help` ) or the command `man` (for manual)\n\t\n### <b>\n<div class=\"code\">\n\n```\nls --help\nman ls\n```\n</div>\n### </b>\n\n\n## About spaces and file names\n\n Put name in quotes if it has spaces (test code below)\n\n```\ntouch Programming Class.txt\nls\n\ntouch \"Programming Class.txt\"\nls\n```\n\nQuotes are NORMALLY (not always) interchangeable  (test code below)\n\n```\necho \"This is good\"\necho 'This is good'\n```\n\nDo not start with one quote type and end with another\n\n## Shortcuts - part 1\n\n\n - <span class=\"code\">`~` </span>or <span class=\"code\">`$HOME` </span>: your home folder (can be defined by the user)\n - <span class=\"code\">`.`</span> : the folder that you are currently in\n - <span class=\"code\">`..`</span>: the folder that contains the one you are currently in\n - <span class=\"code\">`Ctrl+C`</span>: cancel a command\n - In MobaxTerm, find and modify useful shortcuts by clicking on Settings -> Keyboard shortcuts\n\n## Shortcuts - part 2\n\n - <span class=\"code\">`whoami`</span>\n\t- prints your username (if saved in the computer)\n- Use `tab` to complete words \n- In a current command or in a text file, move the cursor faster by using `Ctrl+Arrow` (right or left arrow in a command line, in a text file up and down arrow too) (this works everywhere!!!)\n\n\n## Basic commands - part 1\n\n\t\t\n - <span class=\"code\">`cd`</span>\n\t- acronym for \"change directory\" (directory = folder)\n\t- If used alone, opens your home folder\n\t- The name of the folder to which you want to go comes after `cd` \n\t\t- `cd` , `cd ~` and `cd $HOME` are synonyms\n\t- `cd -` - takes you to the previous folder\n\n## Basic commands - part 2\n\n - <span class=\"code\">`pwd`</span>\n\t- acronym for \"print working directory\" (directory = folder)\n\t- equivalent to the R function `getwd()` or python's `os.getcwd()`\n\t- prints the full path to your current folder\n\t- A full path always starts from the root (/)\n\n##  Basic commands - part 3\n\n - <span class=\"code\">`ls`</span>\n\t- lists the contents of your current folder\n\t- Check <a href=\"#(4)\">`slide 2`</a> where we used this command\n - Use <span class=\"code\">`>`</span> after a command to save the output\n\t\n```\npwd > myFolder\ncat myFolder\n```\n\n- Use <span class=\"code\">`>>`</span> to add the current output to a previous file\n\t\n```\nls >> myFolder\ncat myFolder\n```\n\n## Managing text files - part 1\n\n- <span class=\"code\">`cat`</span> : prints the contents of the file to the screen (check <a href=\"#(9)\">`slide 9`</a>\n\t- Do not use it with files are that not text (images, pdfs, compressed files) or is too big\n\t- If several files names are put after the command, one file is printed followed by the next (conCATenation)\n- <span class=\"code\">`head`</span> and <span class=\"code\">`tail`</span>: prints to the screen the first/last 10 lines of the file \n\n## Managing text files - part 2\n\n- <span class=\"code\">`less`</span> : opens the file as \"read-only\"\n\t- Search for a word in a file inside less by typing \"/\" followed by the word\n\t- To close less, press Q\n- <span class=\"code\">`more`</span> : opens the file as \"read-only\", when the file is closed, prints it to the screen\n\n\n## Managing text files - part 3\n\n- <span class=\"code\">`nano`</span> : open a text file to edit it.\n- <span class=\"code\">`grep`</span> : searches for a word/phrase in the file and prints the lines that match\n\t- Can search for several phrases (one per line) in a file by using the option `-f`\n\t- If you don't care about the upper/lower case, use the option `-i` or `--ignore-case`\n\n## Managing text files - part 4\n\nSearch for lines that have the word programming in the file myFolder created in <a href=\"#(9)\">`slide 9`</a></span>\n\n```\ngrep \"Programming\" myFolder\n```\n\n- <span class=\"code\">`wc`</span> : word count. Counts the number of characters, words and lines in a file\n- <span class=\"code\">`echo`</span> : repeats the text that follows it (check <a href=\"#(4)\">`slide 4`</a>)\n\n## Exercise\n\n- Save a fasta file into your home folder with the name myFasta.fa\n- Use `grep` to find all the lines with sequence IDs.\n\t- Note - put the word or phrase you will search for inside `\"\"`\n\n## Exercise - Solution\n\n- Save a fasta file into your home folder with the name myFasta.fa\n- Use `grep` to find all the lines with sequence IDs.\n\t- Note - put the word or phrase you will search for inside `\"\"`\n\n### <b>\n<div class=\"code\">\n\\#<span style=\"color: white\"> In all fasta files, the sequence ID line is indicated by the symbol >, so we just need to look for it</span>\n\n`grep \">\" myFasta.fa`\n\n</div>\t\n### </b>\n\n- Normally, if you just search for one word, the quotes are not needed, by in this case, the symbol `\">\"` could also mean \"send the output to\", which would replace the myFasta.fa file\n\n## Managing files - part 1\n\n- <span class=\"code\">`cp`</span> : acronym for copy\n\t- <span class=\"code\">`cp file file2`</span> : creates a copy of the file \"file\" and saves it in the file \"file2\"\n\t- <span class=\"code\">`cp file folder`</span> : creates a copy of the file \"file\" and saves it with the same name in the folder \"folder\"\n\t- <span class=\"code\">`cp file file2 folder`</span>: both files \"file\" and \"file2\" are copied into the folder \"folder\" with the same names\n\t- <span class=\"code\">`cp folder folder2 -r`</span> : the option -r allows the copy of the entire folder.\n\t\t- If folder2 doesn't exist, it will be created to hold the same files as \"folder\"\n\t\t- If folder2 exists, a copy of \"folder\" will be created inside of folder2\n\n## Managing files - part 2\n\n- <span class=\"code\">`mv`</span> : acronym for move. Move file from one place to another\n\t- <span class=\"code\">`mv file file2`</span> : renames \"file\" as \"file2\"\n\t- <span class=\"code\">`mv file folder`</span> : moves \"file\" into the folder \"folder\"\n\t- <span class=\"code\">`mv file file2 folder`</span>: both files \"file\" and \"file2\" are moved into the folder \"folder\" with the same names\n\t- <span class=\"code\">`mv folder folder2`</span> : \n\t\t- If folder2 doesn't exist, it is the same as renaming \"folder\" as \"folder2\"\n\t\t- If folder2 exists, \"folder\" is moved to that folder\n\n## Managing files - part 3\n\n- <span class=\"code\">`rm`</span> : acronym for remove. Deletes files. **They are PERMANENTELY deleted, there is no trash bin here!!!!!!!**\n\t- <span class=\"code\">`rm file file2`</span> : deletes both files\n\t- <span class=\"code\">`rm file file2 -i`</span> : asks the user if they really want to delete each file, if `y` is pressed, the file is deleted (`-i` for interactive)\n\n## Managing folders\n\n- <span class=\"code\">`mkdir`</span> : acronym for \"make directory\". Creates new folders with the specified names. \n\t- Gives an error if something with the same name already exists in the current folder. \n\t- If many names are given (separated by spaces, creates all names folders)\n- <span class=\"code\">`rmdir`</span> : acronym for \"remove directory\". Deletes **_empty_** folders. \n\t- If the folder is not empty, gives an error.\n\t- If many names are given (separated by spaces, deletes all names folders **if they are empty**\n- <span class=\"code\">`rm -r folder`</span> : as in `cp`, the option `-r` allows the `rm` to work with a folder. It deletes everything in the folder, then deletes the folder itself\n\n## Resources for help\n\n[Glossary of commands](https://github.com/KarenGoncalves/Amaryllidaceae_database/wiki/Glossary-of-commands)\n\n[Book on basic unix commands](https://eriqande.github.io/eca-bioinf-handbook/)\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.4.551","auto-stretch":true,"title-block-banner":true,"title":"Unix basic commands","description":"1st unix class","fontsize":"1.5em","linkcolor":"grey","callout-appearance":"simple","categories":["Unix basics"],"author":"Karen Cristine Goncalves, Ph.D.","date":"2023-01-26","transition":"none","theme":"dark","scrollable":true}}},"projectFormats":["html"]}